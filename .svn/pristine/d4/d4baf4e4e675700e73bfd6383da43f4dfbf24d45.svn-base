/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.cps.authority.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class AuthorityService {

  public interface Iface {

    public Map<String,String> uploadPermission(ByteBuffer file, String filename) throws org.apache.thrift.TException;

    public Map<String,String> importPermission(String projectname, String xmlpath) throws org.apache.thrift.TException;

    public Map<String,String> addRole(String rolename, String memo) throws org.apache.thrift.TException;

    public Map<String,String> delRole(String roleid) throws org.apache.thrift.TException;

    public Map<String,String> updRole(String id, String rolename, String memo) throws org.apache.thrift.TException;

    public Map<String,String> getRole(String roleid) throws org.apache.thrift.TException;

    public Map<String,String> queProAllPermission(List<String> projectnames) throws org.apache.thrift.TException;

    public Map<String,String> queProUserPermission(String userid, List<String> projectnames) throws org.apache.thrift.TException;

    public Map<String,String> getCatalog(String userid, String projectname) throws org.apache.thrift.TException;

    public Map<String,String> queProPermission(String roleid, List<String> projectnames) throws org.apache.thrift.TException;

    public Map<String,String> setRolePermission(String roleid, List<String> permissionids, List<String> projectnames) throws org.apache.thrift.TException;

    public Map<String,String> delUser(String userid) throws org.apache.thrift.TException;

    public Map<String,String> openUser(String userid) throws org.apache.thrift.TException;

    public Map<String,String> closeUser(String userid) throws org.apache.thrift.TException;

    public Map<String,String> queRole() throws org.apache.thrift.TException;

    public Map<String,String> queRoleByUser(String userid) throws org.apache.thrift.TException;

    public Map<String,String> setUserRole(String userid, List<String> roleids) throws org.apache.thrift.TException;

    public Map<String,String> authorityFilter(String userid, String url, String project) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void uploadPermission(ByteBuffer file, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void importPermission(String projectname, String xmlpath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRole(String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRole(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updRole(String id, String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRole(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queProAllPermission(List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queProUserPermission(String userid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCatalog(String userid, String projectname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queProPermission(String roleid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setRolePermission(String roleid, List<String> permissionids, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queRole(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queRoleByUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setUserRole(String userid, List<String> roleids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authorityFilter(String userid, String url, String project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> uploadPermission(ByteBuffer file, String filename) throws org.apache.thrift.TException
    {
      send_uploadPermission(file, filename);
      return recv_uploadPermission();
    }

    public void send_uploadPermission(ByteBuffer file, String filename) throws org.apache.thrift.TException
    {
      uploadPermission_args args = new uploadPermission_args();
      args.setFile(file);
      args.setFilename(filename);
      sendBase("uploadPermission", args);
    }

    public Map<String,String> recv_uploadPermission() throws org.apache.thrift.TException
    {
      uploadPermission_result result = new uploadPermission_result();
      receiveBase(result, "uploadPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadPermission failed: unknown result");
    }

    public Map<String,String> importPermission(String projectname, String xmlpath) throws org.apache.thrift.TException
    {
      send_importPermission(projectname, xmlpath);
      return recv_importPermission();
    }

    public void send_importPermission(String projectname, String xmlpath) throws org.apache.thrift.TException
    {
      importPermission_args args = new importPermission_args();
      args.setProjectname(projectname);
      args.setXmlpath(xmlpath);
      sendBase("importPermission", args);
    }

    public Map<String,String> recv_importPermission() throws org.apache.thrift.TException
    {
      importPermission_result result = new importPermission_result();
      receiveBase(result, "importPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importPermission failed: unknown result");
    }

    public Map<String,String> addRole(String rolename, String memo) throws org.apache.thrift.TException
    {
      send_addRole(rolename, memo);
      return recv_addRole();
    }

    public void send_addRole(String rolename, String memo) throws org.apache.thrift.TException
    {
      addRole_args args = new addRole_args();
      args.setRolename(rolename);
      args.setMemo(memo);
      sendBase("addRole", args);
    }

    public Map<String,String> recv_addRole() throws org.apache.thrift.TException
    {
      addRole_result result = new addRole_result();
      receiveBase(result, "addRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRole failed: unknown result");
    }

    public Map<String,String> delRole(String roleid) throws org.apache.thrift.TException
    {
      send_delRole(roleid);
      return recv_delRole();
    }

    public void send_delRole(String roleid) throws org.apache.thrift.TException
    {
      delRole_args args = new delRole_args();
      args.setRoleid(roleid);
      sendBase("delRole", args);
    }

    public Map<String,String> recv_delRole() throws org.apache.thrift.TException
    {
      delRole_result result = new delRole_result();
      receiveBase(result, "delRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRole failed: unknown result");
    }

    public Map<String,String> updRole(String id, String rolename, String memo) throws org.apache.thrift.TException
    {
      send_updRole(id, rolename, memo);
      return recv_updRole();
    }

    public void send_updRole(String id, String rolename, String memo) throws org.apache.thrift.TException
    {
      updRole_args args = new updRole_args();
      args.setId(id);
      args.setRolename(rolename);
      args.setMemo(memo);
      sendBase("updRole", args);
    }

    public Map<String,String> recv_updRole() throws org.apache.thrift.TException
    {
      updRole_result result = new updRole_result();
      receiveBase(result, "updRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updRole failed: unknown result");
    }

    public Map<String,String> getRole(String roleid) throws org.apache.thrift.TException
    {
      send_getRole(roleid);
      return recv_getRole();
    }

    public void send_getRole(String roleid) throws org.apache.thrift.TException
    {
      getRole_args args = new getRole_args();
      args.setRoleid(roleid);
      sendBase("getRole", args);
    }

    public Map<String,String> recv_getRole() throws org.apache.thrift.TException
    {
      getRole_result result = new getRole_result();
      receiveBase(result, "getRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRole failed: unknown result");
    }

    public Map<String,String> queProAllPermission(List<String> projectnames) throws org.apache.thrift.TException
    {
      send_queProAllPermission(projectnames);
      return recv_queProAllPermission();
    }

    public void send_queProAllPermission(List<String> projectnames) throws org.apache.thrift.TException
    {
      queProAllPermission_args args = new queProAllPermission_args();
      args.setProjectnames(projectnames);
      sendBase("queProAllPermission", args);
    }

    public Map<String,String> recv_queProAllPermission() throws org.apache.thrift.TException
    {
      queProAllPermission_result result = new queProAllPermission_result();
      receiveBase(result, "queProAllPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queProAllPermission failed: unknown result");
    }

    public Map<String,String> queProUserPermission(String userid, List<String> projectnames) throws org.apache.thrift.TException
    {
      send_queProUserPermission(userid, projectnames);
      return recv_queProUserPermission();
    }

    public void send_queProUserPermission(String userid, List<String> projectnames) throws org.apache.thrift.TException
    {
      queProUserPermission_args args = new queProUserPermission_args();
      args.setUserid(userid);
      args.setProjectnames(projectnames);
      sendBase("queProUserPermission", args);
    }

    public Map<String,String> recv_queProUserPermission() throws org.apache.thrift.TException
    {
      queProUserPermission_result result = new queProUserPermission_result();
      receiveBase(result, "queProUserPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queProUserPermission failed: unknown result");
    }

    public Map<String,String> getCatalog(String userid, String projectname) throws org.apache.thrift.TException
    {
      send_getCatalog(userid, projectname);
      return recv_getCatalog();
    }

    public void send_getCatalog(String userid, String projectname) throws org.apache.thrift.TException
    {
      getCatalog_args args = new getCatalog_args();
      args.setUserid(userid);
      args.setProjectname(projectname);
      sendBase("getCatalog", args);
    }

    public Map<String,String> recv_getCatalog() throws org.apache.thrift.TException
    {
      getCatalog_result result = new getCatalog_result();
      receiveBase(result, "getCatalog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCatalog failed: unknown result");
    }

    public Map<String,String> queProPermission(String roleid, List<String> projectnames) throws org.apache.thrift.TException
    {
      send_queProPermission(roleid, projectnames);
      return recv_queProPermission();
    }

    public void send_queProPermission(String roleid, List<String> projectnames) throws org.apache.thrift.TException
    {
      queProPermission_args args = new queProPermission_args();
      args.setRoleid(roleid);
      args.setProjectnames(projectnames);
      sendBase("queProPermission", args);
    }

    public Map<String,String> recv_queProPermission() throws org.apache.thrift.TException
    {
      queProPermission_result result = new queProPermission_result();
      receiveBase(result, "queProPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queProPermission failed: unknown result");
    }

    public Map<String,String> setRolePermission(String roleid, List<String> permissionids, List<String> projectnames) throws org.apache.thrift.TException
    {
      send_setRolePermission(roleid, permissionids, projectnames);
      return recv_setRolePermission();
    }

    public void send_setRolePermission(String roleid, List<String> permissionids, List<String> projectnames) throws org.apache.thrift.TException
    {
      setRolePermission_args args = new setRolePermission_args();
      args.setRoleid(roleid);
      args.setPermissionids(permissionids);
      args.setProjectnames(projectnames);
      sendBase("setRolePermission", args);
    }

    public Map<String,String> recv_setRolePermission() throws org.apache.thrift.TException
    {
      setRolePermission_result result = new setRolePermission_result();
      receiveBase(result, "setRolePermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setRolePermission failed: unknown result");
    }

    public Map<String,String> delUser(String userid) throws org.apache.thrift.TException
    {
      send_delUser(userid);
      return recv_delUser();
    }

    public void send_delUser(String userid) throws org.apache.thrift.TException
    {
      delUser_args args = new delUser_args();
      args.setUserid(userid);
      sendBase("delUser", args);
    }

    public Map<String,String> recv_delUser() throws org.apache.thrift.TException
    {
      delUser_result result = new delUser_result();
      receiveBase(result, "delUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delUser failed: unknown result");
    }

    public Map<String,String> openUser(String userid) throws org.apache.thrift.TException
    {
      send_openUser(userid);
      return recv_openUser();
    }

    public void send_openUser(String userid) throws org.apache.thrift.TException
    {
      openUser_args args = new openUser_args();
      args.setUserid(userid);
      sendBase("openUser", args);
    }

    public Map<String,String> recv_openUser() throws org.apache.thrift.TException
    {
      openUser_result result = new openUser_result();
      receiveBase(result, "openUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openUser failed: unknown result");
    }

    public Map<String,String> closeUser(String userid) throws org.apache.thrift.TException
    {
      send_closeUser(userid);
      return recv_closeUser();
    }

    public void send_closeUser(String userid) throws org.apache.thrift.TException
    {
      closeUser_args args = new closeUser_args();
      args.setUserid(userid);
      sendBase("closeUser", args);
    }

    public Map<String,String> recv_closeUser() throws org.apache.thrift.TException
    {
      closeUser_result result = new closeUser_result();
      receiveBase(result, "closeUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeUser failed: unknown result");
    }

    public Map<String,String> queRole() throws org.apache.thrift.TException
    {
      send_queRole();
      return recv_queRole();
    }

    public void send_queRole() throws org.apache.thrift.TException
    {
      queRole_args args = new queRole_args();
      sendBase("queRole", args);
    }

    public Map<String,String> recv_queRole() throws org.apache.thrift.TException
    {
      queRole_result result = new queRole_result();
      receiveBase(result, "queRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queRole failed: unknown result");
    }

    public Map<String,String> queRoleByUser(String userid) throws org.apache.thrift.TException
    {
      send_queRoleByUser(userid);
      return recv_queRoleByUser();
    }

    public void send_queRoleByUser(String userid) throws org.apache.thrift.TException
    {
      queRoleByUser_args args = new queRoleByUser_args();
      args.setUserid(userid);
      sendBase("queRoleByUser", args);
    }

    public Map<String,String> recv_queRoleByUser() throws org.apache.thrift.TException
    {
      queRoleByUser_result result = new queRoleByUser_result();
      receiveBase(result, "queRoleByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queRoleByUser failed: unknown result");
    }

    public Map<String,String> setUserRole(String userid, List<String> roleids) throws org.apache.thrift.TException
    {
      send_setUserRole(userid, roleids);
      return recv_setUserRole();
    }

    public void send_setUserRole(String userid, List<String> roleids) throws org.apache.thrift.TException
    {
      setUserRole_args args = new setUserRole_args();
      args.setUserid(userid);
      args.setRoleids(roleids);
      sendBase("setUserRole", args);
    }

    public Map<String,String> recv_setUserRole() throws org.apache.thrift.TException
    {
      setUserRole_result result = new setUserRole_result();
      receiveBase(result, "setUserRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserRole failed: unknown result");
    }

    public Map<String,String> authorityFilter(String userid, String url, String project) throws org.apache.thrift.TException
    {
      send_authorityFilter(userid, url, project);
      return recv_authorityFilter();
    }

    public void send_authorityFilter(String userid, String url, String project) throws org.apache.thrift.TException
    {
      authorityFilter_args args = new authorityFilter_args();
      args.setUserid(userid);
      args.setUrl(url);
      args.setProject(project);
      sendBase("authorityFilter", args);
    }

    public Map<String,String> recv_authorityFilter() throws org.apache.thrift.TException
    {
      authorityFilter_result result = new authorityFilter_result();
      receiveBase(result, "authorityFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authorityFilter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void uploadPermission(ByteBuffer file, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadPermission_call method_call = new uploadPermission_call(file, filename, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer file;
      private String filename;
      public uploadPermission_call(ByteBuffer file, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file = file;
        this.filename = filename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadPermission_args args = new uploadPermission_args();
        args.setFile(file);
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadPermission();
      }
    }

    public void importPermission(String projectname, String xmlpath, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      importPermission_call method_call = new importPermission_call(projectname, xmlpath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class importPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectname;
      private String xmlpath;
      public importPermission_call(String projectname, String xmlpath, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectname = projectname;
        this.xmlpath = xmlpath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        importPermission_args args = new importPermission_args();
        args.setProjectname(projectname);
        args.setXmlpath(xmlpath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_importPermission();
      }
    }

    public void addRole(String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRole_call method_call = new addRole_call(rolename, memo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rolename;
      private String memo;
      public addRole_call(String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rolename = rolename;
        this.memo = memo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRole_args args = new addRole_args();
        args.setRolename(rolename);
        args.setMemo(memo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRole();
      }
    }

    public void delRole(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRole_call method_call = new delRole_call(roleid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roleid;
      public delRole_call(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRole_args args = new delRole_args();
        args.setRoleid(roleid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRole();
      }
    }

    public void updRole(String id, String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updRole_call method_call = new updRole_call(id, rolename, memo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String rolename;
      private String memo;
      public updRole_call(String id, String rolename, String memo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.rolename = rolename;
        this.memo = memo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updRole_args args = new updRole_args();
        args.setId(id);
        args.setRolename(rolename);
        args.setMemo(memo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updRole();
      }
    }

    public void getRole(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRole_call method_call = new getRole_call(roleid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roleid;
      public getRole_call(String roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRole_args args = new getRole_args();
        args.setRoleid(roleid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRole();
      }
    }

    public void queProAllPermission(List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queProAllPermission_call method_call = new queProAllPermission_call(projectnames, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queProAllPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> projectnames;
      public queProAllPermission_call(List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectnames = projectnames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queProAllPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queProAllPermission_args args = new queProAllPermission_args();
        args.setProjectnames(projectnames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queProAllPermission();
      }
    }

    public void queProUserPermission(String userid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queProUserPermission_call method_call = new queProUserPermission_call(userid, projectnames, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queProUserPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private List<String> projectnames;
      public queProUserPermission_call(String userid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.projectnames = projectnames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queProUserPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queProUserPermission_args args = new queProUserPermission_args();
        args.setUserid(userid);
        args.setProjectnames(projectnames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queProUserPermission();
      }
    }

    public void getCatalog(String userid, String projectname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCatalog_call method_call = new getCatalog_call(userid, projectname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCatalog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String projectname;
      public getCatalog_call(String userid, String projectname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.projectname = projectname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCatalog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCatalog_args args = new getCatalog_args();
        args.setUserid(userid);
        args.setProjectname(projectname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCatalog();
      }
    }

    public void queProPermission(String roleid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queProPermission_call method_call = new queProPermission_call(roleid, projectnames, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queProPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roleid;
      private List<String> projectnames;
      public queProPermission_call(String roleid, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
        this.projectnames = projectnames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queProPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queProPermission_args args = new queProPermission_args();
        args.setRoleid(roleid);
        args.setProjectnames(projectnames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queProPermission();
      }
    }

    public void setRolePermission(String roleid, List<String> permissionids, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRolePermission_call method_call = new setRolePermission_call(roleid, permissionids, projectnames, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRolePermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roleid;
      private List<String> permissionids;
      private List<String> projectnames;
      public setRolePermission_call(String roleid, List<String> permissionids, List<String> projectnames, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
        this.permissionids = permissionids;
        this.projectnames = projectnames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRolePermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRolePermission_args args = new setRolePermission_args();
        args.setRoleid(roleid);
        args.setPermissionids(permissionids);
        args.setProjectnames(projectnames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setRolePermission();
      }
    }

    public void delUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delUser_call method_call = new delUser_call(userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      public delUser_call(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delUser_args args = new delUser_args();
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delUser();
      }
    }

    public void openUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openUser_call method_call = new openUser_call(userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      public openUser_call(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openUser_args args = new openUser_args();
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openUser();
      }
    }

    public void closeUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeUser_call method_call = new closeUser_call(userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      public closeUser_call(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeUser_args args = new closeUser_args();
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeUser();
      }
    }

    public void queRole(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queRole_call method_call = new queRole_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queRole_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queRole_args args = new queRole_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queRole();
      }
    }

    public void queRoleByUser(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queRoleByUser_call method_call = new queRoleByUser_call(userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queRoleByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      public queRoleByUser_call(String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queRoleByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queRoleByUser_args args = new queRoleByUser_args();
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queRoleByUser();
      }
    }

    public void setUserRole(String userid, List<String> roleids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserRole_call method_call = new setUserRole_call(userid, roleids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private List<String> roleids;
      public setUserRole_call(String userid, List<String> roleids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.roleids = roleids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserRole_args args = new setUserRole_args();
        args.setUserid(userid);
        args.setRoleids(roleids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserRole();
      }
    }

    public void authorityFilter(String userid, String url, String project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authorityFilter_call method_call = new authorityFilter_call(userid, url, project, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authorityFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String url;
      private String project;
      public authorityFilter_call(String userid, String url, String project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.url = url;
        this.project = project;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authorityFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authorityFilter_args args = new authorityFilter_args();
        args.setUserid(userid);
        args.setUrl(url);
        args.setProject(project);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authorityFilter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("uploadPermission", new uploadPermission());
      processMap.put("importPermission", new importPermission());
      processMap.put("addRole", new addRole());
      processMap.put("delRole", new delRole());
      processMap.put("updRole", new updRole());
      processMap.put("getRole", new getRole());
      processMap.put("queProAllPermission", new queProAllPermission());
      processMap.put("queProUserPermission", new queProUserPermission());
      processMap.put("getCatalog", new getCatalog());
      processMap.put("queProPermission", new queProPermission());
      processMap.put("setRolePermission", new setRolePermission());
      processMap.put("delUser", new delUser());
      processMap.put("openUser", new openUser());
      processMap.put("closeUser", new closeUser());
      processMap.put("queRole", new queRole());
      processMap.put("queRoleByUser", new queRoleByUser());
      processMap.put("setUserRole", new setUserRole());
      processMap.put("authorityFilter", new authorityFilter());
      return processMap;
    }

    public static class uploadPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadPermission_args> {
      public uploadPermission() {
        super("uploadPermission");
      }

      public uploadPermission_args getEmptyArgsInstance() {
        return new uploadPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadPermission_result getResult(I iface, uploadPermission_args args) throws org.apache.thrift.TException {
        uploadPermission_result result = new uploadPermission_result();
        result.success = iface.uploadPermission(args.file, args.filename);
        return result;
      }
    }

    public static class importPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importPermission_args> {
      public importPermission() {
        super("importPermission");
      }

      public importPermission_args getEmptyArgsInstance() {
        return new importPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public importPermission_result getResult(I iface, importPermission_args args) throws org.apache.thrift.TException {
        importPermission_result result = new importPermission_result();
        result.success = iface.importPermission(args.projectname, args.xmlpath);
        return result;
      }
    }

    public static class addRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRole_args> {
      public addRole() {
        super("addRole");
      }

      public addRole_args getEmptyArgsInstance() {
        return new addRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRole_result getResult(I iface, addRole_args args) throws org.apache.thrift.TException {
        addRole_result result = new addRole_result();
        result.success = iface.addRole(args.rolename, args.memo);
        return result;
      }
    }

    public static class delRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRole_args> {
      public delRole() {
        super("delRole");
      }

      public delRole_args getEmptyArgsInstance() {
        return new delRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRole_result getResult(I iface, delRole_args args) throws org.apache.thrift.TException {
        delRole_result result = new delRole_result();
        result.success = iface.delRole(args.roleid);
        return result;
      }
    }

    public static class updRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updRole_args> {
      public updRole() {
        super("updRole");
      }

      public updRole_args getEmptyArgsInstance() {
        return new updRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updRole_result getResult(I iface, updRole_args args) throws org.apache.thrift.TException {
        updRole_result result = new updRole_result();
        result.success = iface.updRole(args.id, args.rolename, args.memo);
        return result;
      }
    }

    public static class getRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRole_args> {
      public getRole() {
        super("getRole");
      }

      public getRole_args getEmptyArgsInstance() {
        return new getRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRole_result getResult(I iface, getRole_args args) throws org.apache.thrift.TException {
        getRole_result result = new getRole_result();
        result.success = iface.getRole(args.roleid);
        return result;
      }
    }

    public static class queProAllPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queProAllPermission_args> {
      public queProAllPermission() {
        super("queProAllPermission");
      }

      public queProAllPermission_args getEmptyArgsInstance() {
        return new queProAllPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queProAllPermission_result getResult(I iface, queProAllPermission_args args) throws org.apache.thrift.TException {
        queProAllPermission_result result = new queProAllPermission_result();
        result.success = iface.queProAllPermission(args.projectnames);
        return result;
      }
    }

    public static class queProUserPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queProUserPermission_args> {
      public queProUserPermission() {
        super("queProUserPermission");
      }

      public queProUserPermission_args getEmptyArgsInstance() {
        return new queProUserPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queProUserPermission_result getResult(I iface, queProUserPermission_args args) throws org.apache.thrift.TException {
        queProUserPermission_result result = new queProUserPermission_result();
        result.success = iface.queProUserPermission(args.userid, args.projectnames);
        return result;
      }
    }

    public static class getCatalog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCatalog_args> {
      public getCatalog() {
        super("getCatalog");
      }

      public getCatalog_args getEmptyArgsInstance() {
        return new getCatalog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCatalog_result getResult(I iface, getCatalog_args args) throws org.apache.thrift.TException {
        getCatalog_result result = new getCatalog_result();
        result.success = iface.getCatalog(args.userid, args.projectname);
        return result;
      }
    }

    public static class queProPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queProPermission_args> {
      public queProPermission() {
        super("queProPermission");
      }

      public queProPermission_args getEmptyArgsInstance() {
        return new queProPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queProPermission_result getResult(I iface, queProPermission_args args) throws org.apache.thrift.TException {
        queProPermission_result result = new queProPermission_result();
        result.success = iface.queProPermission(args.roleid, args.projectnames);
        return result;
      }
    }

    public static class setRolePermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRolePermission_args> {
      public setRolePermission() {
        super("setRolePermission");
      }

      public setRolePermission_args getEmptyArgsInstance() {
        return new setRolePermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRolePermission_result getResult(I iface, setRolePermission_args args) throws org.apache.thrift.TException {
        setRolePermission_result result = new setRolePermission_result();
        result.success = iface.setRolePermission(args.roleid, args.permissionids, args.projectnames);
        return result;
      }
    }

    public static class delUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delUser_args> {
      public delUser() {
        super("delUser");
      }

      public delUser_args getEmptyArgsInstance() {
        return new delUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delUser_result getResult(I iface, delUser_args args) throws org.apache.thrift.TException {
        delUser_result result = new delUser_result();
        result.success = iface.delUser(args.userid);
        return result;
      }
    }

    public static class openUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openUser_args> {
      public openUser() {
        super("openUser");
      }

      public openUser_args getEmptyArgsInstance() {
        return new openUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openUser_result getResult(I iface, openUser_args args) throws org.apache.thrift.TException {
        openUser_result result = new openUser_result();
        result.success = iface.openUser(args.userid);
        return result;
      }
    }

    public static class closeUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeUser_args> {
      public closeUser() {
        super("closeUser");
      }

      public closeUser_args getEmptyArgsInstance() {
        return new closeUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeUser_result getResult(I iface, closeUser_args args) throws org.apache.thrift.TException {
        closeUser_result result = new closeUser_result();
        result.success = iface.closeUser(args.userid);
        return result;
      }
    }

    public static class queRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queRole_args> {
      public queRole() {
        super("queRole");
      }

      public queRole_args getEmptyArgsInstance() {
        return new queRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queRole_result getResult(I iface, queRole_args args) throws org.apache.thrift.TException {
        queRole_result result = new queRole_result();
        result.success = iface.queRole();
        return result;
      }
    }

    public static class queRoleByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queRoleByUser_args> {
      public queRoleByUser() {
        super("queRoleByUser");
      }

      public queRoleByUser_args getEmptyArgsInstance() {
        return new queRoleByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queRoleByUser_result getResult(I iface, queRoleByUser_args args) throws org.apache.thrift.TException {
        queRoleByUser_result result = new queRoleByUser_result();
        result.success = iface.queRoleByUser(args.userid);
        return result;
      }
    }

    public static class setUserRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserRole_args> {
      public setUserRole() {
        super("setUserRole");
      }

      public setUserRole_args getEmptyArgsInstance() {
        return new setUserRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUserRole_result getResult(I iface, setUserRole_args args) throws org.apache.thrift.TException {
        setUserRole_result result = new setUserRole_result();
        result.success = iface.setUserRole(args.userid, args.roleids);
        return result;
      }
    }

    public static class authorityFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authorityFilter_args> {
      public authorityFilter() {
        super("authorityFilter");
      }

      public authorityFilter_args getEmptyArgsInstance() {
        return new authorityFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authorityFilter_result getResult(I iface, authorityFilter_args args) throws org.apache.thrift.TException {
        authorityFilter_result result = new authorityFilter_result();
        result.success = iface.authorityFilter(args.userid, args.url, args.project);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("uploadPermission", new uploadPermission());
      processMap.put("importPermission", new importPermission());
      processMap.put("addRole", new addRole());
      processMap.put("delRole", new delRole());
      processMap.put("updRole", new updRole());
      processMap.put("getRole", new getRole());
      processMap.put("queProAllPermission", new queProAllPermission());
      processMap.put("queProUserPermission", new queProUserPermission());
      processMap.put("getCatalog", new getCatalog());
      processMap.put("queProPermission", new queProPermission());
      processMap.put("setRolePermission", new setRolePermission());
      processMap.put("delUser", new delUser());
      processMap.put("openUser", new openUser());
      processMap.put("closeUser", new closeUser());
      processMap.put("queRole", new queRole());
      processMap.put("queRoleByUser", new queRoleByUser());
      processMap.put("setUserRole", new setUserRole());
      processMap.put("authorityFilter", new authorityFilter());
      return processMap;
    }

    public static class uploadPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadPermission_args, Map<String,String>> {
      public uploadPermission() {
        super("uploadPermission");
      }

      public uploadPermission_args getEmptyArgsInstance() {
        return new uploadPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            uploadPermission_result result = new uploadPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadPermission_result result = new uploadPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.uploadPermission(args.file, args.filename,resultHandler);
      }
    }

    public static class importPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importPermission_args, Map<String,String>> {
      public importPermission() {
        super("importPermission");
      }

      public importPermission_args getEmptyArgsInstance() {
        return new importPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            importPermission_result result = new importPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            importPermission_result result = new importPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, importPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.importPermission(args.projectname, args.xmlpath,resultHandler);
      }
    }

    public static class addRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRole_args, Map<String,String>> {
      public addRole() {
        super("addRole");
      }

      public addRole_args getEmptyArgsInstance() {
        return new addRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            addRole_result result = new addRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRole_result result = new addRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.addRole(args.rolename, args.memo,resultHandler);
      }
    }

    public static class delRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRole_args, Map<String,String>> {
      public delRole() {
        super("delRole");
      }

      public delRole_args getEmptyArgsInstance() {
        return new delRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            delRole_result result = new delRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRole_result result = new delRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.delRole(args.roleid,resultHandler);
      }
    }

    public static class updRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updRole_args, Map<String,String>> {
      public updRole() {
        super("updRole");
      }

      public updRole_args getEmptyArgsInstance() {
        return new updRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            updRole_result result = new updRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updRole_result result = new updRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.updRole(args.id, args.rolename, args.memo,resultHandler);
      }
    }

    public static class getRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRole_args, Map<String,String>> {
      public getRole() {
        super("getRole");
      }

      public getRole_args getEmptyArgsInstance() {
        return new getRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getRole_result result = new getRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRole_result result = new getRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getRole(args.roleid,resultHandler);
      }
    }

    public static class queProAllPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queProAllPermission_args, Map<String,String>> {
      public queProAllPermission() {
        super("queProAllPermission");
      }

      public queProAllPermission_args getEmptyArgsInstance() {
        return new queProAllPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queProAllPermission_result result = new queProAllPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queProAllPermission_result result = new queProAllPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queProAllPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queProAllPermission(args.projectnames,resultHandler);
      }
    }

    public static class queProUserPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queProUserPermission_args, Map<String,String>> {
      public queProUserPermission() {
        super("queProUserPermission");
      }

      public queProUserPermission_args getEmptyArgsInstance() {
        return new queProUserPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queProUserPermission_result result = new queProUserPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queProUserPermission_result result = new queProUserPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queProUserPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queProUserPermission(args.userid, args.projectnames,resultHandler);
      }
    }

    public static class getCatalog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCatalog_args, Map<String,String>> {
      public getCatalog() {
        super("getCatalog");
      }

      public getCatalog_args getEmptyArgsInstance() {
        return new getCatalog_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            getCatalog_result result = new getCatalog_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCatalog_result result = new getCatalog_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCatalog_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getCatalog(args.userid, args.projectname,resultHandler);
      }
    }

    public static class queProPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queProPermission_args, Map<String,String>> {
      public queProPermission() {
        super("queProPermission");
      }

      public queProPermission_args getEmptyArgsInstance() {
        return new queProPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queProPermission_result result = new queProPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queProPermission_result result = new queProPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queProPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queProPermission(args.roleid, args.projectnames,resultHandler);
      }
    }

    public static class setRolePermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRolePermission_args, Map<String,String>> {
      public setRolePermission() {
        super("setRolePermission");
      }

      public setRolePermission_args getEmptyArgsInstance() {
        return new setRolePermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            setRolePermission_result result = new setRolePermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setRolePermission_result result = new setRolePermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRolePermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.setRolePermission(args.roleid, args.permissionids, args.projectnames,resultHandler);
      }
    }

    public static class delUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delUser_args, Map<String,String>> {
      public delUser() {
        super("delUser");
      }

      public delUser_args getEmptyArgsInstance() {
        return new delUser_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            delUser_result result = new delUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delUser_result result = new delUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delUser_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.delUser(args.userid,resultHandler);
      }
    }

    public static class openUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openUser_args, Map<String,String>> {
      public openUser() {
        super("openUser");
      }

      public openUser_args getEmptyArgsInstance() {
        return new openUser_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            openUser_result result = new openUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openUser_result result = new openUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openUser_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.openUser(args.userid,resultHandler);
      }
    }

    public static class closeUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeUser_args, Map<String,String>> {
      public closeUser() {
        super("closeUser");
      }

      public closeUser_args getEmptyArgsInstance() {
        return new closeUser_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            closeUser_result result = new closeUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeUser_result result = new closeUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeUser_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.closeUser(args.userid,resultHandler);
      }
    }

    public static class queRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queRole_args, Map<String,String>> {
      public queRole() {
        super("queRole");
      }

      public queRole_args getEmptyArgsInstance() {
        return new queRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queRole_result result = new queRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queRole_result result = new queRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queRole(resultHandler);
      }
    }

    public static class queRoleByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queRoleByUser_args, Map<String,String>> {
      public queRoleByUser() {
        super("queRoleByUser");
      }

      public queRoleByUser_args getEmptyArgsInstance() {
        return new queRoleByUser_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queRoleByUser_result result = new queRoleByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queRoleByUser_result result = new queRoleByUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queRoleByUser_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queRoleByUser(args.userid,resultHandler);
      }
    }

    public static class setUserRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserRole_args, Map<String,String>> {
      public setUserRole() {
        super("setUserRole");
      }

      public setUserRole_args getEmptyArgsInstance() {
        return new setUserRole_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            setUserRole_result result = new setUserRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setUserRole_result result = new setUserRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUserRole_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.setUserRole(args.userid, args.roleids,resultHandler);
      }
    }

    public static class authorityFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authorityFilter_args, Map<String,String>> {
      public authorityFilter() {
        super("authorityFilter");
      }

      public authorityFilter_args getEmptyArgsInstance() {
        return new authorityFilter_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            authorityFilter_result result = new authorityFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authorityFilter_result result = new authorityFilter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authorityFilter_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.authorityFilter(args.userid, args.url, args.project,resultHandler);
      }
    }

  }

  public static class uploadPermission_args implements org.apache.thrift.TBase<uploadPermission_args, uploadPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadPermission_args");

    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadPermission_argsTupleSchemeFactory());
    }

    public ByteBuffer file; // required
    public String filename; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE((short)1, "file"),
      FILENAME((short)2, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE
            return FILE;
          case 2: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadPermission_args.class, metaDataMap);
    }

    public uploadPermission_args() {
    }

    public uploadPermission_args(
      ByteBuffer file,
      String filename)
    {
      this();
      this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadPermission_args(uploadPermission_args other) {
      if (other.isSetFile()) {
        this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
      }
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public uploadPermission_args deepCopy() {
      return new uploadPermission_args(this);
    }

    @Override
    public void clear() {
      this.file = null;
      this.filename = null;
    }

    public byte[] getFile() {
      setFile(org.apache.thrift.TBaseHelper.rightSize(file));
      return file == null ? null : file.array();
    }

    public ByteBuffer bufferForFile() {
      return org.apache.thrift.TBaseHelper.copyBinary(file);
    }

    public uploadPermission_args setFile(byte[] file) {
      this.file = file == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(file, file.length));
      return this;
    }

    public uploadPermission_args setFile(ByteBuffer file) {
      this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public String getFilename() {
      return this.filename;
    }

    public uploadPermission_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((ByteBuffer)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE:
        return getFile();

      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE:
        return isSetFile();
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadPermission_args)
        return this.equals((uploadPermission_args)that);
      return false;
    }

    public boolean equals(uploadPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_file = true && (isSetFile());
      list.add(present_file);
      if (present_file)
        list.add(file);

      boolean present_filename = true && (isSetFilename());
      list.add(present_filename);
      if (present_filename)
        list.add(filename);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadPermission_args(");
      boolean first = true;

      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadPermission_argsStandardSchemeFactory implements SchemeFactory {
      public uploadPermission_argsStandardScheme getScheme() {
        return new uploadPermission_argsStandardScheme();
      }
    }

    private static class uploadPermission_argsStandardScheme extends StandardScheme<uploadPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readBinary();
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadPermission_argsTupleSchemeFactory implements SchemeFactory {
      public uploadPermission_argsTupleScheme getScheme() {
        return new uploadPermission_argsTupleScheme();
      }
    }

    private static class uploadPermission_argsTupleScheme extends TupleScheme<uploadPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile()) {
          optionals.set(0);
        }
        if (struct.isSetFilename()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFile()) {
          oprot.writeBinary(struct.file);
        }
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.file = iprot.readBinary();
          struct.setFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
      }
    }

  }

  public static class uploadPermission_result implements org.apache.thrift.TBase<uploadPermission_result, uploadPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadPermission_result.class, metaDataMap);
    }

    public uploadPermission_result() {
    }

    public uploadPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadPermission_result(uploadPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public uploadPermission_result deepCopy() {
      return new uploadPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public uploadPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadPermission_result)
        return this.equals((uploadPermission_result)that);
      return false;
    }

    public boolean equals(uploadPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadPermission_resultStandardSchemeFactory implements SchemeFactory {
      public uploadPermission_resultStandardScheme getScheme() {
        return new uploadPermission_resultStandardScheme();
      }
    }

    private static class uploadPermission_resultStandardScheme extends StandardScheme<uploadPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadPermission_resultTupleSchemeFactory implements SchemeFactory {
      public uploadPermission_resultTupleScheme getScheme() {
        return new uploadPermission_resultTupleScheme();
      }
    }

    private static class uploadPermission_resultTupleScheme extends TupleScheme<uploadPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class importPermission_args implements org.apache.thrift.TBase<importPermission_args, importPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<importPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importPermission_args");

    private static final org.apache.thrift.protocol.TField PROJECTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XMLPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlpath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importPermission_argsTupleSchemeFactory());
    }

    public String projectname; // required
    public String xmlpath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECTNAME((short)1, "projectname"),
      XMLPATH((short)2, "xmlpath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECTNAME
            return PROJECTNAME;
          case 2: // XMLPATH
            return XMLPATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECTNAME, new org.apache.thrift.meta_data.FieldMetaData("projectname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XMLPATH, new org.apache.thrift.meta_data.FieldMetaData("xmlpath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importPermission_args.class, metaDataMap);
    }

    public importPermission_args() {
    }

    public importPermission_args(
      String projectname,
      String xmlpath)
    {
      this();
      this.projectname = projectname;
      this.xmlpath = xmlpath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importPermission_args(importPermission_args other) {
      if (other.isSetProjectname()) {
        this.projectname = other.projectname;
      }
      if (other.isSetXmlpath()) {
        this.xmlpath = other.xmlpath;
      }
    }

    public importPermission_args deepCopy() {
      return new importPermission_args(this);
    }

    @Override
    public void clear() {
      this.projectname = null;
      this.xmlpath = null;
    }

    public String getProjectname() {
      return this.projectname;
    }

    public importPermission_args setProjectname(String projectname) {
      this.projectname = projectname;
      return this;
    }

    public void unsetProjectname() {
      this.projectname = null;
    }

    /** Returns true if field projectname is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectname() {
      return this.projectname != null;
    }

    public void setProjectnameIsSet(boolean value) {
      if (!value) {
        this.projectname = null;
      }
    }

    public String getXmlpath() {
      return this.xmlpath;
    }

    public importPermission_args setXmlpath(String xmlpath) {
      this.xmlpath = xmlpath;
      return this;
    }

    public void unsetXmlpath() {
      this.xmlpath = null;
    }

    /** Returns true if field xmlpath is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlpath() {
      return this.xmlpath != null;
    }

    public void setXmlpathIsSet(boolean value) {
      if (!value) {
        this.xmlpath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECTNAME:
        if (value == null) {
          unsetProjectname();
        } else {
          setProjectname((String)value);
        }
        break;

      case XMLPATH:
        if (value == null) {
          unsetXmlpath();
        } else {
          setXmlpath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECTNAME:
        return getProjectname();

      case XMLPATH:
        return getXmlpath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECTNAME:
        return isSetProjectname();
      case XMLPATH:
        return isSetXmlpath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importPermission_args)
        return this.equals((importPermission_args)that);
      return false;
    }

    public boolean equals(importPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_projectname = true && this.isSetProjectname();
      boolean that_present_projectname = true && that.isSetProjectname();
      if (this_present_projectname || that_present_projectname) {
        if (!(this_present_projectname && that_present_projectname))
          return false;
        if (!this.projectname.equals(that.projectname))
          return false;
      }

      boolean this_present_xmlpath = true && this.isSetXmlpath();
      boolean that_present_xmlpath = true && that.isSetXmlpath();
      if (this_present_xmlpath || that_present_xmlpath) {
        if (!(this_present_xmlpath && that_present_xmlpath))
          return false;
        if (!this.xmlpath.equals(that.xmlpath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectname = true && (isSetProjectname());
      list.add(present_projectname);
      if (present_projectname)
        list.add(projectname);

      boolean present_xmlpath = true && (isSetXmlpath());
      list.add(present_xmlpath);
      if (present_xmlpath)
        list.add(xmlpath);

      return list.hashCode();
    }

    @Override
    public int compareTo(importPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectname()).compareTo(other.isSetProjectname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectname, other.projectname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetXmlpath()).compareTo(other.isSetXmlpath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlpath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlpath, other.xmlpath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importPermission_args(");
      boolean first = true;

      sb.append("projectname:");
      if (this.projectname == null) {
        sb.append("null");
      } else {
        sb.append(this.projectname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xmlpath:");
      if (this.xmlpath == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlpath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importPermission_argsStandardSchemeFactory implements SchemeFactory {
      public importPermission_argsStandardScheme getScheme() {
        return new importPermission_argsStandardScheme();
      }
    }

    private static class importPermission_argsStandardScheme extends StandardScheme<importPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectname = iprot.readString();
                struct.setProjectnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XMLPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlpath = iprot.readString();
                struct.setXmlpathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectname != null) {
          oprot.writeFieldBegin(PROJECTNAME_FIELD_DESC);
          oprot.writeString(struct.projectname);
          oprot.writeFieldEnd();
        }
        if (struct.xmlpath != null) {
          oprot.writeFieldBegin(XMLPATH_FIELD_DESC);
          oprot.writeString(struct.xmlpath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importPermission_argsTupleSchemeFactory implements SchemeFactory {
      public importPermission_argsTupleScheme getScheme() {
        return new importPermission_argsTupleScheme();
      }
    }

    private static class importPermission_argsTupleScheme extends TupleScheme<importPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectname()) {
          optionals.set(0);
        }
        if (struct.isSetXmlpath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectname()) {
          oprot.writeString(struct.projectname);
        }
        if (struct.isSetXmlpath()) {
          oprot.writeString(struct.xmlpath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectname = iprot.readString();
          struct.setProjectnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.xmlpath = iprot.readString();
          struct.setXmlpathIsSet(true);
        }
      }
    }

  }

  public static class importPermission_result implements org.apache.thrift.TBase<importPermission_result, importPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<importPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importPermission_result.class, metaDataMap);
    }

    public importPermission_result() {
    }

    public importPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importPermission_result(importPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public importPermission_result deepCopy() {
      return new importPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public importPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importPermission_result)
        return this.equals((importPermission_result)that);
      return false;
    }

    public boolean equals(importPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(importPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importPermission_resultStandardSchemeFactory implements SchemeFactory {
      public importPermission_resultStandardScheme getScheme() {
        return new importPermission_resultStandardScheme();
      }
    }

    private static class importPermission_resultStandardScheme extends StandardScheme<importPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.success.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter14 : struct.success.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importPermission_resultTupleSchemeFactory implements SchemeFactory {
      public importPermission_resultTupleScheme getScheme() {
        return new importPermission_resultTupleScheme();
      }
    }

    private static class importPermission_resultTupleScheme extends TupleScheme<importPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter15 : struct.success.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map16.size);
            String _key17;
            String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.success.put(_key17, _val18);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRole_args implements org.apache.thrift.TBase<addRole_args, addRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRole_args");

    private static final org.apache.thrift.protocol.TField ROLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rolename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("memo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRole_argsTupleSchemeFactory());
    }

    public String rolename; // required
    public String memo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLENAME((short)1, "rolename"),
      MEMO((short)2, "memo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLENAME
            return ROLENAME;
          case 2: // MEMO
            return MEMO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLENAME, new org.apache.thrift.meta_data.FieldMetaData("rolename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMO, new org.apache.thrift.meta_data.FieldMetaData("memo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRole_args.class, metaDataMap);
    }

    public addRole_args() {
    }

    public addRole_args(
      String rolename,
      String memo)
    {
      this();
      this.rolename = rolename;
      this.memo = memo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRole_args(addRole_args other) {
      if (other.isSetRolename()) {
        this.rolename = other.rolename;
      }
      if (other.isSetMemo()) {
        this.memo = other.memo;
      }
    }

    public addRole_args deepCopy() {
      return new addRole_args(this);
    }

    @Override
    public void clear() {
      this.rolename = null;
      this.memo = null;
    }

    public String getRolename() {
      return this.rolename;
    }

    public addRole_args setRolename(String rolename) {
      this.rolename = rolename;
      return this;
    }

    public void unsetRolename() {
      this.rolename = null;
    }

    /** Returns true if field rolename is set (has been assigned a value) and false otherwise */
    public boolean isSetRolename() {
      return this.rolename != null;
    }

    public void setRolenameIsSet(boolean value) {
      if (!value) {
        this.rolename = null;
      }
    }

    public String getMemo() {
      return this.memo;
    }

    public addRole_args setMemo(String memo) {
      this.memo = memo;
      return this;
    }

    public void unsetMemo() {
      this.memo = null;
    }

    /** Returns true if field memo is set (has been assigned a value) and false otherwise */
    public boolean isSetMemo() {
      return this.memo != null;
    }

    public void setMemoIsSet(boolean value) {
      if (!value) {
        this.memo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLENAME:
        if (value == null) {
          unsetRolename();
        } else {
          setRolename((String)value);
        }
        break;

      case MEMO:
        if (value == null) {
          unsetMemo();
        } else {
          setMemo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLENAME:
        return getRolename();

      case MEMO:
        return getMemo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLENAME:
        return isSetRolename();
      case MEMO:
        return isSetMemo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRole_args)
        return this.equals((addRole_args)that);
      return false;
    }

    public boolean equals(addRole_args that) {
      if (that == null)
        return false;

      boolean this_present_rolename = true && this.isSetRolename();
      boolean that_present_rolename = true && that.isSetRolename();
      if (this_present_rolename || that_present_rolename) {
        if (!(this_present_rolename && that_present_rolename))
          return false;
        if (!this.rolename.equals(that.rolename))
          return false;
      }

      boolean this_present_memo = true && this.isSetMemo();
      boolean that_present_memo = true && that.isSetMemo();
      if (this_present_memo || that_present_memo) {
        if (!(this_present_memo && that_present_memo))
          return false;
        if (!this.memo.equals(that.memo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rolename = true && (isSetRolename());
      list.add(present_rolename);
      if (present_rolename)
        list.add(rolename);

      boolean present_memo = true && (isSetMemo());
      list.add(present_memo);
      if (present_memo)
        list.add(memo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRolename()).compareTo(other.isSetRolename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRolename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolename, other.rolename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemo()).compareTo(other.isSetMemo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memo, other.memo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRole_args(");
      boolean first = true;

      sb.append("rolename:");
      if (this.rolename == null) {
        sb.append("null");
      } else {
        sb.append(this.rolename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memo:");
      if (this.memo == null) {
        sb.append("null");
      } else {
        sb.append(this.memo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRole_argsStandardSchemeFactory implements SchemeFactory {
      public addRole_argsStandardScheme getScheme() {
        return new addRole_argsStandardScheme();
      }
    }

    private static class addRole_argsStandardScheme extends StandardScheme<addRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rolename = iprot.readString();
                struct.setRolenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memo = iprot.readString();
                struct.setMemoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rolename != null) {
          oprot.writeFieldBegin(ROLENAME_FIELD_DESC);
          oprot.writeString(struct.rolename);
          oprot.writeFieldEnd();
        }
        if (struct.memo != null) {
          oprot.writeFieldBegin(MEMO_FIELD_DESC);
          oprot.writeString(struct.memo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRole_argsTupleSchemeFactory implements SchemeFactory {
      public addRole_argsTupleScheme getScheme() {
        return new addRole_argsTupleScheme();
      }
    }

    private static class addRole_argsTupleScheme extends TupleScheme<addRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRolename()) {
          optionals.set(0);
        }
        if (struct.isSetMemo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRolename()) {
          oprot.writeString(struct.rolename);
        }
        if (struct.isSetMemo()) {
          oprot.writeString(struct.memo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rolename = iprot.readString();
          struct.setRolenameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memo = iprot.readString();
          struct.setMemoIsSet(true);
        }
      }
    }

  }

  public static class addRole_result implements org.apache.thrift.TBase<addRole_result, addRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRole_result.class, metaDataMap);
    }

    public addRole_result() {
    }

    public addRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRole_result(addRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public addRole_result deepCopy() {
      return new addRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public addRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRole_result)
        return this.equals((addRole_result)that);
      return false;
    }

    public boolean equals(addRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRole_resultStandardSchemeFactory implements SchemeFactory {
      public addRole_resultStandardScheme getScheme() {
        return new addRole_resultStandardScheme();
      }
    }

    private static class addRole_resultStandardScheme extends StandardScheme<addRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map20.size);
                  String _key21;
                  String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.success.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter24 : struct.success.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRole_resultTupleSchemeFactory implements SchemeFactory {
      public addRole_resultTupleScheme getScheme() {
        return new addRole_resultTupleScheme();
      }
    }

    private static class addRole_resultTupleScheme extends TupleScheme<addRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter25 : struct.success.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.success.put(_key27, _val28);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRole_args implements org.apache.thrift.TBase<delRole_args, delRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRole_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRole_argsTupleSchemeFactory());
    }

    public String roleid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRole_args.class, metaDataMap);
    }

    public delRole_args() {
    }

    public delRole_args(
      String roleid)
    {
      this();
      this.roleid = roleid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRole_args(delRole_args other) {
      if (other.isSetRoleid()) {
        this.roleid = other.roleid;
      }
    }

    public delRole_args deepCopy() {
      return new delRole_args(this);
    }

    @Override
    public void clear() {
      this.roleid = null;
    }

    public String getRoleid() {
      return this.roleid;
    }

    public delRole_args setRoleid(String roleid) {
      this.roleid = roleid;
      return this;
    }

    public void unsetRoleid() {
      this.roleid = null;
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return this.roleid != null;
    }

    public void setRoleidIsSet(boolean value) {
      if (!value) {
        this.roleid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRole_args)
        return this.equals((delRole_args)that);
      return false;
    }

    public boolean equals(delRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true && this.isSetRoleid();
      boolean that_present_roleid = true && that.isSetRoleid();
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (!this.roleid.equals(that.roleid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true && (isSetRoleid());
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRole_args(");
      boolean first = true;

      sb.append("roleid:");
      if (this.roleid == null) {
        sb.append("null");
      } else {
        sb.append(this.roleid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRole_argsStandardSchemeFactory implements SchemeFactory {
      public delRole_argsStandardScheme getScheme() {
        return new delRole_argsStandardScheme();
      }
    }

    private static class delRole_argsStandardScheme extends StandardScheme<delRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleid = iprot.readString();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleid != null) {
          oprot.writeFieldBegin(ROLEID_FIELD_DESC);
          oprot.writeString(struct.roleid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRole_argsTupleSchemeFactory implements SchemeFactory {
      public delRole_argsTupleScheme getScheme() {
        return new delRole_argsTupleScheme();
      }
    }

    private static class delRole_argsTupleScheme extends TupleScheme<delRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleid()) {
          oprot.writeString(struct.roleid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleid = iprot.readString();
          struct.setRoleidIsSet(true);
        }
      }
    }

  }

  public static class delRole_result implements org.apache.thrift.TBase<delRole_result, delRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRole_result.class, metaDataMap);
    }

    public delRole_result() {
    }

    public delRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRole_result(delRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public delRole_result deepCopy() {
      return new delRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public delRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRole_result)
        return this.equals((delRole_result)that);
      return false;
    }

    public boolean equals(delRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRole_resultStandardSchemeFactory implements SchemeFactory {
      public delRole_resultStandardScheme getScheme() {
        return new delRole_resultStandardScheme();
      }
    }

    private static class delRole_resultStandardScheme extends StandardScheme<delRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map30.size);
                  String _key31;
                  String _val32;
                  for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                  {
                    _key31 = iprot.readString();
                    _val32 = iprot.readString();
                    struct.success.put(_key31, _val32);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter34 : struct.success.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRole_resultTupleSchemeFactory implements SchemeFactory {
      public delRole_resultTupleScheme getScheme() {
        return new delRole_resultTupleScheme();
      }
    }

    private static class delRole_resultTupleScheme extends TupleScheme<delRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter35 : struct.success.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map36.size);
            String _key37;
            String _val38;
            for (int _i39 = 0; _i39 < _map36.size; ++_i39)
            {
              _key37 = iprot.readString();
              _val38 = iprot.readString();
              struct.success.put(_key37, _val38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updRole_args implements org.apache.thrift.TBase<updRole_args, updRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<updRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updRole_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rolename", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("memo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updRole_argsTupleSchemeFactory());
    }

    public String id; // required
    public String rolename; // required
    public String memo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ROLENAME((short)2, "rolename"),
      MEMO((short)3, "memo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ROLENAME
            return ROLENAME;
          case 3: // MEMO
            return MEMO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLENAME, new org.apache.thrift.meta_data.FieldMetaData("rolename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMO, new org.apache.thrift.meta_data.FieldMetaData("memo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updRole_args.class, metaDataMap);
    }

    public updRole_args() {
    }

    public updRole_args(
      String id,
      String rolename,
      String memo)
    {
      this();
      this.id = id;
      this.rolename = rolename;
      this.memo = memo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updRole_args(updRole_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetRolename()) {
        this.rolename = other.rolename;
      }
      if (other.isSetMemo()) {
        this.memo = other.memo;
      }
    }

    public updRole_args deepCopy() {
      return new updRole_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.rolename = null;
      this.memo = null;
    }

    public String getId() {
      return this.id;
    }

    public updRole_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getRolename() {
      return this.rolename;
    }

    public updRole_args setRolename(String rolename) {
      this.rolename = rolename;
      return this;
    }

    public void unsetRolename() {
      this.rolename = null;
    }

    /** Returns true if field rolename is set (has been assigned a value) and false otherwise */
    public boolean isSetRolename() {
      return this.rolename != null;
    }

    public void setRolenameIsSet(boolean value) {
      if (!value) {
        this.rolename = null;
      }
    }

    public String getMemo() {
      return this.memo;
    }

    public updRole_args setMemo(String memo) {
      this.memo = memo;
      return this;
    }

    public void unsetMemo() {
      this.memo = null;
    }

    /** Returns true if field memo is set (has been assigned a value) and false otherwise */
    public boolean isSetMemo() {
      return this.memo != null;
    }

    public void setMemoIsSet(boolean value) {
      if (!value) {
        this.memo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRolename();
        } else {
          setRolename((String)value);
        }
        break;

      case MEMO:
        if (value == null) {
          unsetMemo();
        } else {
          setMemo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case ROLENAME:
        return getRolename();

      case MEMO:
        return getMemo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ROLENAME:
        return isSetRolename();
      case MEMO:
        return isSetMemo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updRole_args)
        return this.equals((updRole_args)that);
      return false;
    }

    public boolean equals(updRole_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_rolename = true && this.isSetRolename();
      boolean that_present_rolename = true && that.isSetRolename();
      if (this_present_rolename || that_present_rolename) {
        if (!(this_present_rolename && that_present_rolename))
          return false;
        if (!this.rolename.equals(that.rolename))
          return false;
      }

      boolean this_present_memo = true && this.isSetMemo();
      boolean that_present_memo = true && that.isSetMemo();
      if (this_present_memo || that_present_memo) {
        if (!(this_present_memo && that_present_memo))
          return false;
        if (!this.memo.equals(that.memo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_rolename = true && (isSetRolename());
      list.add(present_rolename);
      if (present_rolename)
        list.add(rolename);

      boolean present_memo = true && (isSetMemo());
      list.add(present_memo);
      if (present_memo)
        list.add(memo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRolename()).compareTo(other.isSetRolename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRolename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolename, other.rolename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemo()).compareTo(other.isSetMemo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memo, other.memo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updRole_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rolename:");
      if (this.rolename == null) {
        sb.append("null");
      } else {
        sb.append(this.rolename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memo:");
      if (this.memo == null) {
        sb.append("null");
      } else {
        sb.append(this.memo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updRole_argsStandardSchemeFactory implements SchemeFactory {
      public updRole_argsStandardScheme getScheme() {
        return new updRole_argsStandardScheme();
      }
    }

    private static class updRole_argsStandardScheme extends StandardScheme<updRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rolename = iprot.readString();
                struct.setRolenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEMO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memo = iprot.readString();
                struct.setMemoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.rolename != null) {
          oprot.writeFieldBegin(ROLENAME_FIELD_DESC);
          oprot.writeString(struct.rolename);
          oprot.writeFieldEnd();
        }
        if (struct.memo != null) {
          oprot.writeFieldBegin(MEMO_FIELD_DESC);
          oprot.writeString(struct.memo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updRole_argsTupleSchemeFactory implements SchemeFactory {
      public updRole_argsTupleScheme getScheme() {
        return new updRole_argsTupleScheme();
      }
    }

    private static class updRole_argsTupleScheme extends TupleScheme<updRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetRolename()) {
          optionals.set(1);
        }
        if (struct.isSetMemo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetRolename()) {
          oprot.writeString(struct.rolename);
        }
        if (struct.isSetMemo()) {
          oprot.writeString(struct.memo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rolename = iprot.readString();
          struct.setRolenameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.memo = iprot.readString();
          struct.setMemoIsSet(true);
        }
      }
    }

  }

  public static class updRole_result implements org.apache.thrift.TBase<updRole_result, updRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<updRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updRole_result.class, metaDataMap);
    }

    public updRole_result() {
    }

    public updRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updRole_result(updRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public updRole_result deepCopy() {
      return new updRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public updRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updRole_result)
        return this.equals((updRole_result)that);
      return false;
    }

    public boolean equals(updRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updRole_resultStandardSchemeFactory implements SchemeFactory {
      public updRole_resultStandardScheme getScheme() {
        return new updRole_resultStandardScheme();
      }
    }

    private static class updRole_resultStandardScheme extends StandardScheme<updRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map40.size);
                  String _key41;
                  String _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readString();
                    _val42 = iprot.readString();
                    struct.success.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter44 : struct.success.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updRole_resultTupleSchemeFactory implements SchemeFactory {
      public updRole_resultTupleScheme getScheme() {
        return new updRole_resultTupleScheme();
      }
    }

    private static class updRole_resultTupleScheme extends TupleScheme<updRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter45 : struct.success.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map46.size);
            String _key47;
            String _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readString();
              _val48 = iprot.readString();
              struct.success.put(_key47, _val48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRole_args implements org.apache.thrift.TBase<getRole_args, getRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRole_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRole_argsTupleSchemeFactory());
    }

    public String roleid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRole_args.class, metaDataMap);
    }

    public getRole_args() {
    }

    public getRole_args(
      String roleid)
    {
      this();
      this.roleid = roleid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRole_args(getRole_args other) {
      if (other.isSetRoleid()) {
        this.roleid = other.roleid;
      }
    }

    public getRole_args deepCopy() {
      return new getRole_args(this);
    }

    @Override
    public void clear() {
      this.roleid = null;
    }

    public String getRoleid() {
      return this.roleid;
    }

    public getRole_args setRoleid(String roleid) {
      this.roleid = roleid;
      return this;
    }

    public void unsetRoleid() {
      this.roleid = null;
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return this.roleid != null;
    }

    public void setRoleidIsSet(boolean value) {
      if (!value) {
        this.roleid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRole_args)
        return this.equals((getRole_args)that);
      return false;
    }

    public boolean equals(getRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true && this.isSetRoleid();
      boolean that_present_roleid = true && that.isSetRoleid();
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (!this.roleid.equals(that.roleid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true && (isSetRoleid());
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRole_args(");
      boolean first = true;

      sb.append("roleid:");
      if (this.roleid == null) {
        sb.append("null");
      } else {
        sb.append(this.roleid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRole_argsStandardSchemeFactory implements SchemeFactory {
      public getRole_argsStandardScheme getScheme() {
        return new getRole_argsStandardScheme();
      }
    }

    private static class getRole_argsStandardScheme extends StandardScheme<getRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleid = iprot.readString();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleid != null) {
          oprot.writeFieldBegin(ROLEID_FIELD_DESC);
          oprot.writeString(struct.roleid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRole_argsTupleSchemeFactory implements SchemeFactory {
      public getRole_argsTupleScheme getScheme() {
        return new getRole_argsTupleScheme();
      }
    }

    private static class getRole_argsTupleScheme extends TupleScheme<getRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleid()) {
          oprot.writeString(struct.roleid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleid = iprot.readString();
          struct.setRoleidIsSet(true);
        }
      }
    }

  }

  public static class getRole_result implements org.apache.thrift.TBase<getRole_result, getRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRole_result.class, metaDataMap);
    }

    public getRole_result() {
    }

    public getRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRole_result(getRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public getRole_result deepCopy() {
      return new getRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRole_result)
        return this.equals((getRole_result)that);
      return false;
    }

    public boolean equals(getRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRole_resultStandardSchemeFactory implements SchemeFactory {
      public getRole_resultStandardScheme getScheme() {
        return new getRole_resultStandardScheme();
      }
    }

    private static class getRole_resultStandardScheme extends StandardScheme<getRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map50.size);
                  String _key51;
                  String _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readString();
                    _val52 = iprot.readString();
                    struct.success.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter54 : struct.success.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRole_resultTupleSchemeFactory implements SchemeFactory {
      public getRole_resultTupleScheme getScheme() {
        return new getRole_resultTupleScheme();
      }
    }

    private static class getRole_resultTupleScheme extends TupleScheme<getRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter55 : struct.success.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map56.size);
            String _key57;
            String _val58;
            for (int _i59 = 0; _i59 < _map56.size; ++_i59)
            {
              _key57 = iprot.readString();
              _val58 = iprot.readString();
              struct.success.put(_key57, _val58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queProAllPermission_args implements org.apache.thrift.TBase<queProAllPermission_args, queProAllPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<queProAllPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProAllPermission_args");

    private static final org.apache.thrift.protocol.TField PROJECTNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("projectnames", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProAllPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProAllPermission_argsTupleSchemeFactory());
    }

    public List<String> projectnames; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECTNAMES((short)1, "projectnames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECTNAMES
            return PROJECTNAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECTNAMES, new org.apache.thrift.meta_data.FieldMetaData("projectnames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProAllPermission_args.class, metaDataMap);
    }

    public queProAllPermission_args() {
    }

    public queProAllPermission_args(
      List<String> projectnames)
    {
      this();
      this.projectnames = projectnames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProAllPermission_args(queProAllPermission_args other) {
      if (other.isSetProjectnames()) {
        List<String> __this__projectnames = new ArrayList<String>(other.projectnames);
        this.projectnames = __this__projectnames;
      }
    }

    public queProAllPermission_args deepCopy() {
      return new queProAllPermission_args(this);
    }

    @Override
    public void clear() {
      this.projectnames = null;
    }

    public int getProjectnamesSize() {
      return (this.projectnames == null) ? 0 : this.projectnames.size();
    }

    public java.util.Iterator<String> getProjectnamesIterator() {
      return (this.projectnames == null) ? null : this.projectnames.iterator();
    }

    public void addToProjectnames(String elem) {
      if (this.projectnames == null) {
        this.projectnames = new ArrayList<String>();
      }
      this.projectnames.add(elem);
    }

    public List<String> getProjectnames() {
      return this.projectnames;
    }

    public queProAllPermission_args setProjectnames(List<String> projectnames) {
      this.projectnames = projectnames;
      return this;
    }

    public void unsetProjectnames() {
      this.projectnames = null;
    }

    /** Returns true if field projectnames is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectnames() {
      return this.projectnames != null;
    }

    public void setProjectnamesIsSet(boolean value) {
      if (!value) {
        this.projectnames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECTNAMES:
        if (value == null) {
          unsetProjectnames();
        } else {
          setProjectnames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECTNAMES:
        return getProjectnames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECTNAMES:
        return isSetProjectnames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProAllPermission_args)
        return this.equals((queProAllPermission_args)that);
      return false;
    }

    public boolean equals(queProAllPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_projectnames = true && this.isSetProjectnames();
      boolean that_present_projectnames = true && that.isSetProjectnames();
      if (this_present_projectnames || that_present_projectnames) {
        if (!(this_present_projectnames && that_present_projectnames))
          return false;
        if (!this.projectnames.equals(that.projectnames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectnames = true && (isSetProjectnames());
      list.add(present_projectnames);
      if (present_projectnames)
        list.add(projectnames);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProAllPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectnames()).compareTo(other.isSetProjectnames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectnames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectnames, other.projectnames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProAllPermission_args(");
      boolean first = true;

      sb.append("projectnames:");
      if (this.projectnames == null) {
        sb.append("null");
      } else {
        sb.append(this.projectnames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProAllPermission_argsStandardSchemeFactory implements SchemeFactory {
      public queProAllPermission_argsStandardScheme getScheme() {
        return new queProAllPermission_argsStandardScheme();
      }
    }

    private static class queProAllPermission_argsStandardScheme extends StandardScheme<queProAllPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProAllPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECTNAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.projectnames = new ArrayList<String>(_list60.size);
                  String _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = iprot.readString();
                    struct.projectnames.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectnamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProAllPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectnames != null) {
          oprot.writeFieldBegin(PROJECTNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.projectnames.size()));
            for (String _iter63 : struct.projectnames)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProAllPermission_argsTupleSchemeFactory implements SchemeFactory {
      public queProAllPermission_argsTupleScheme getScheme() {
        return new queProAllPermission_argsTupleScheme();
      }
    }

    private static class queProAllPermission_argsTupleScheme extends TupleScheme<queProAllPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProAllPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectnames()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectnames()) {
          {
            oprot.writeI32(struct.projectnames.size());
            for (String _iter64 : struct.projectnames)
            {
              oprot.writeString(_iter64);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProAllPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.projectnames = new ArrayList<String>(_list65.size);
            String _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = iprot.readString();
              struct.projectnames.add(_elem66);
            }
          }
          struct.setProjectnamesIsSet(true);
        }
      }
    }

  }

  public static class queProAllPermission_result implements org.apache.thrift.TBase<queProAllPermission_result, queProAllPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<queProAllPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProAllPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProAllPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProAllPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProAllPermission_result.class, metaDataMap);
    }

    public queProAllPermission_result() {
    }

    public queProAllPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProAllPermission_result(queProAllPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queProAllPermission_result deepCopy() {
      return new queProAllPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queProAllPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProAllPermission_result)
        return this.equals((queProAllPermission_result)that);
      return false;
    }

    public boolean equals(queProAllPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProAllPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProAllPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProAllPermission_resultStandardSchemeFactory implements SchemeFactory {
      public queProAllPermission_resultStandardScheme getScheme() {
        return new queProAllPermission_resultStandardScheme();
      }
    }

    private static class queProAllPermission_resultStandardScheme extends StandardScheme<queProAllPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProAllPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map68.size);
                  String _key69;
                  String _val70;
                  for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                  {
                    _key69 = iprot.readString();
                    _val70 = iprot.readString();
                    struct.success.put(_key69, _val70);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProAllPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter72 : struct.success.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              oprot.writeString(_iter72.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProAllPermission_resultTupleSchemeFactory implements SchemeFactory {
      public queProAllPermission_resultTupleScheme getScheme() {
        return new queProAllPermission_resultTupleScheme();
      }
    }

    private static class queProAllPermission_resultTupleScheme extends TupleScheme<queProAllPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProAllPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter73 : struct.success.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              oprot.writeString(_iter73.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProAllPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map74.size);
            String _key75;
            String _val76;
            for (int _i77 = 0; _i77 < _map74.size; ++_i77)
            {
              _key75 = iprot.readString();
              _val76 = iprot.readString();
              struct.success.put(_key75, _val76);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queProUserPermission_args implements org.apache.thrift.TBase<queProUserPermission_args, queProUserPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<queProUserPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProUserPermission_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECTNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("projectnames", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProUserPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProUserPermission_argsTupleSchemeFactory());
    }

    public String userid; // required
    public List<String> projectnames; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      PROJECTNAMES((short)2, "projectnames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // PROJECTNAMES
            return PROJECTNAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECTNAMES, new org.apache.thrift.meta_data.FieldMetaData("projectnames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProUserPermission_args.class, metaDataMap);
    }

    public queProUserPermission_args() {
    }

    public queProUserPermission_args(
      String userid,
      List<String> projectnames)
    {
      this();
      this.userid = userid;
      this.projectnames = projectnames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProUserPermission_args(queProUserPermission_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetProjectnames()) {
        List<String> __this__projectnames = new ArrayList<String>(other.projectnames);
        this.projectnames = __this__projectnames;
      }
    }

    public queProUserPermission_args deepCopy() {
      return new queProUserPermission_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.projectnames = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public queProUserPermission_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public int getProjectnamesSize() {
      return (this.projectnames == null) ? 0 : this.projectnames.size();
    }

    public java.util.Iterator<String> getProjectnamesIterator() {
      return (this.projectnames == null) ? null : this.projectnames.iterator();
    }

    public void addToProjectnames(String elem) {
      if (this.projectnames == null) {
        this.projectnames = new ArrayList<String>();
      }
      this.projectnames.add(elem);
    }

    public List<String> getProjectnames() {
      return this.projectnames;
    }

    public queProUserPermission_args setProjectnames(List<String> projectnames) {
      this.projectnames = projectnames;
      return this;
    }

    public void unsetProjectnames() {
      this.projectnames = null;
    }

    /** Returns true if field projectnames is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectnames() {
      return this.projectnames != null;
    }

    public void setProjectnamesIsSet(boolean value) {
      if (!value) {
        this.projectnames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case PROJECTNAMES:
        if (value == null) {
          unsetProjectnames();
        } else {
          setProjectnames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case PROJECTNAMES:
        return getProjectnames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case PROJECTNAMES:
        return isSetProjectnames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProUserPermission_args)
        return this.equals((queProUserPermission_args)that);
      return false;
    }

    public boolean equals(queProUserPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_projectnames = true && this.isSetProjectnames();
      boolean that_present_projectnames = true && that.isSetProjectnames();
      if (this_present_projectnames || that_present_projectnames) {
        if (!(this_present_projectnames && that_present_projectnames))
          return false;
        if (!this.projectnames.equals(that.projectnames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_projectnames = true && (isSetProjectnames());
      list.add(present_projectnames);
      if (present_projectnames)
        list.add(projectnames);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProUserPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectnames()).compareTo(other.isSetProjectnames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectnames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectnames, other.projectnames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProUserPermission_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectnames:");
      if (this.projectnames == null) {
        sb.append("null");
      } else {
        sb.append(this.projectnames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProUserPermission_argsStandardSchemeFactory implements SchemeFactory {
      public queProUserPermission_argsStandardScheme getScheme() {
        return new queProUserPermission_argsStandardScheme();
      }
    }

    private static class queProUserPermission_argsStandardScheme extends StandardScheme<queProUserPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProUserPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECTNAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                  struct.projectnames = new ArrayList<String>(_list78.size);
                  String _elem79;
                  for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                  {
                    _elem79 = iprot.readString();
                    struct.projectnames.add(_elem79);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectnamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProUserPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.projectnames != null) {
          oprot.writeFieldBegin(PROJECTNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.projectnames.size()));
            for (String _iter81 : struct.projectnames)
            {
              oprot.writeString(_iter81);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProUserPermission_argsTupleSchemeFactory implements SchemeFactory {
      public queProUserPermission_argsTupleScheme getScheme() {
        return new queProUserPermission_argsTupleScheme();
      }
    }

    private static class queProUserPermission_argsTupleScheme extends TupleScheme<queProUserPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProUserPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetProjectnames()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetProjectnames()) {
          {
            oprot.writeI32(struct.projectnames.size());
            for (String _iter82 : struct.projectnames)
            {
              oprot.writeString(_iter82);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProUserPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.projectnames = new ArrayList<String>(_list83.size);
            String _elem84;
            for (int _i85 = 0; _i85 < _list83.size; ++_i85)
            {
              _elem84 = iprot.readString();
              struct.projectnames.add(_elem84);
            }
          }
          struct.setProjectnamesIsSet(true);
        }
      }
    }

  }

  public static class queProUserPermission_result implements org.apache.thrift.TBase<queProUserPermission_result, queProUserPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<queProUserPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProUserPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProUserPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProUserPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProUserPermission_result.class, metaDataMap);
    }

    public queProUserPermission_result() {
    }

    public queProUserPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProUserPermission_result(queProUserPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queProUserPermission_result deepCopy() {
      return new queProUserPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queProUserPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProUserPermission_result)
        return this.equals((queProUserPermission_result)that);
      return false;
    }

    public boolean equals(queProUserPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProUserPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProUserPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProUserPermission_resultStandardSchemeFactory implements SchemeFactory {
      public queProUserPermission_resultStandardScheme getScheme() {
        return new queProUserPermission_resultStandardScheme();
      }
    }

    private static class queProUserPermission_resultStandardScheme extends StandardScheme<queProUserPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProUserPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map86.size);
                  String _key87;
                  String _val88;
                  for (int _i89 = 0; _i89 < _map86.size; ++_i89)
                  {
                    _key87 = iprot.readString();
                    _val88 = iprot.readString();
                    struct.success.put(_key87, _val88);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProUserPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter90 : struct.success.entrySet())
            {
              oprot.writeString(_iter90.getKey());
              oprot.writeString(_iter90.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProUserPermission_resultTupleSchemeFactory implements SchemeFactory {
      public queProUserPermission_resultTupleScheme getScheme() {
        return new queProUserPermission_resultTupleScheme();
      }
    }

    private static class queProUserPermission_resultTupleScheme extends TupleScheme<queProUserPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProUserPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter91 : struct.success.entrySet())
            {
              oprot.writeString(_iter91.getKey());
              oprot.writeString(_iter91.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProUserPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map92.size);
            String _key93;
            String _val94;
            for (int _i95 = 0; _i95 < _map92.size; ++_i95)
            {
              _key93 = iprot.readString();
              _val94 = iprot.readString();
              struct.success.put(_key93, _val94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCatalog_args implements org.apache.thrift.TBase<getCatalog_args, getCatalog_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCatalog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCatalog_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCatalog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCatalog_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String projectname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      PROJECTNAME((short)2, "projectname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // PROJECTNAME
            return PROJECTNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECTNAME, new org.apache.thrift.meta_data.FieldMetaData("projectname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCatalog_args.class, metaDataMap);
    }

    public getCatalog_args() {
    }

    public getCatalog_args(
      String userid,
      String projectname)
    {
      this();
      this.userid = userid;
      this.projectname = projectname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCatalog_args(getCatalog_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetProjectname()) {
        this.projectname = other.projectname;
      }
    }

    public getCatalog_args deepCopy() {
      return new getCatalog_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.projectname = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public getCatalog_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getProjectname() {
      return this.projectname;
    }

    public getCatalog_args setProjectname(String projectname) {
      this.projectname = projectname;
      return this;
    }

    public void unsetProjectname() {
      this.projectname = null;
    }

    /** Returns true if field projectname is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectname() {
      return this.projectname != null;
    }

    public void setProjectnameIsSet(boolean value) {
      if (!value) {
        this.projectname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case PROJECTNAME:
        if (value == null) {
          unsetProjectname();
        } else {
          setProjectname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case PROJECTNAME:
        return getProjectname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case PROJECTNAME:
        return isSetProjectname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCatalog_args)
        return this.equals((getCatalog_args)that);
      return false;
    }

    public boolean equals(getCatalog_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_projectname = true && this.isSetProjectname();
      boolean that_present_projectname = true && that.isSetProjectname();
      if (this_present_projectname || that_present_projectname) {
        if (!(this_present_projectname && that_present_projectname))
          return false;
        if (!this.projectname.equals(that.projectname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_projectname = true && (isSetProjectname());
      list.add(present_projectname);
      if (present_projectname)
        list.add(projectname);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCatalog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectname()).compareTo(other.isSetProjectname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectname, other.projectname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCatalog_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectname:");
      if (this.projectname == null) {
        sb.append("null");
      } else {
        sb.append(this.projectname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCatalog_argsStandardSchemeFactory implements SchemeFactory {
      public getCatalog_argsStandardScheme getScheme() {
        return new getCatalog_argsStandardScheme();
      }
    }

    private static class getCatalog_argsStandardScheme extends StandardScheme<getCatalog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCatalog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectname = iprot.readString();
                struct.setProjectnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCatalog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.projectname != null) {
          oprot.writeFieldBegin(PROJECTNAME_FIELD_DESC);
          oprot.writeString(struct.projectname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCatalog_argsTupleSchemeFactory implements SchemeFactory {
      public getCatalog_argsTupleScheme getScheme() {
        return new getCatalog_argsTupleScheme();
      }
    }

    private static class getCatalog_argsTupleScheme extends TupleScheme<getCatalog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetProjectname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetProjectname()) {
          oprot.writeString(struct.projectname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCatalog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectname = iprot.readString();
          struct.setProjectnameIsSet(true);
        }
      }
    }

  }

  public static class getCatalog_result implements org.apache.thrift.TBase<getCatalog_result, getCatalog_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCatalog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCatalog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCatalog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCatalog_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCatalog_result.class, metaDataMap);
    }

    public getCatalog_result() {
    }

    public getCatalog_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCatalog_result(getCatalog_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public getCatalog_result deepCopy() {
      return new getCatalog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getCatalog_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCatalog_result)
        return this.equals((getCatalog_result)that);
      return false;
    }

    public boolean equals(getCatalog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCatalog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCatalog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCatalog_resultStandardSchemeFactory implements SchemeFactory {
      public getCatalog_resultStandardScheme getScheme() {
        return new getCatalog_resultStandardScheme();
      }
    }

    private static class getCatalog_resultStandardScheme extends StandardScheme<getCatalog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCatalog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map96.size);
                  String _key97;
                  String _val98;
                  for (int _i99 = 0; _i99 < _map96.size; ++_i99)
                  {
                    _key97 = iprot.readString();
                    _val98 = iprot.readString();
                    struct.success.put(_key97, _val98);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCatalog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter100 : struct.success.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCatalog_resultTupleSchemeFactory implements SchemeFactory {
      public getCatalog_resultTupleScheme getScheme() {
        return new getCatalog_resultTupleScheme();
      }
    }

    private static class getCatalog_resultTupleScheme extends TupleScheme<getCatalog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter101 : struct.success.entrySet())
            {
              oprot.writeString(_iter101.getKey());
              oprot.writeString(_iter101.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCatalog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map102 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map102.size);
            String _key103;
            String _val104;
            for (int _i105 = 0; _i105 < _map102.size; ++_i105)
            {
              _key103 = iprot.readString();
              _val104 = iprot.readString();
              struct.success.put(_key103, _val104);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queProPermission_args implements org.apache.thrift.TBase<queProPermission_args, queProPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<queProPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProPermission_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECTNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("projectnames", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProPermission_argsTupleSchemeFactory());
    }

    public String roleid; // required
    public List<String> projectnames; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid"),
      PROJECTNAMES((short)2, "projectnames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          case 2: // PROJECTNAMES
            return PROJECTNAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECTNAMES, new org.apache.thrift.meta_data.FieldMetaData("projectnames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProPermission_args.class, metaDataMap);
    }

    public queProPermission_args() {
    }

    public queProPermission_args(
      String roleid,
      List<String> projectnames)
    {
      this();
      this.roleid = roleid;
      this.projectnames = projectnames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProPermission_args(queProPermission_args other) {
      if (other.isSetRoleid()) {
        this.roleid = other.roleid;
      }
      if (other.isSetProjectnames()) {
        List<String> __this__projectnames = new ArrayList<String>(other.projectnames);
        this.projectnames = __this__projectnames;
      }
    }

    public queProPermission_args deepCopy() {
      return new queProPermission_args(this);
    }

    @Override
    public void clear() {
      this.roleid = null;
      this.projectnames = null;
    }

    public String getRoleid() {
      return this.roleid;
    }

    public queProPermission_args setRoleid(String roleid) {
      this.roleid = roleid;
      return this;
    }

    public void unsetRoleid() {
      this.roleid = null;
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return this.roleid != null;
    }

    public void setRoleidIsSet(boolean value) {
      if (!value) {
        this.roleid = null;
      }
    }

    public int getProjectnamesSize() {
      return (this.projectnames == null) ? 0 : this.projectnames.size();
    }

    public java.util.Iterator<String> getProjectnamesIterator() {
      return (this.projectnames == null) ? null : this.projectnames.iterator();
    }

    public void addToProjectnames(String elem) {
      if (this.projectnames == null) {
        this.projectnames = new ArrayList<String>();
      }
      this.projectnames.add(elem);
    }

    public List<String> getProjectnames() {
      return this.projectnames;
    }

    public queProPermission_args setProjectnames(List<String> projectnames) {
      this.projectnames = projectnames;
      return this;
    }

    public void unsetProjectnames() {
      this.projectnames = null;
    }

    /** Returns true if field projectnames is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectnames() {
      return this.projectnames != null;
    }

    public void setProjectnamesIsSet(boolean value) {
      if (!value) {
        this.projectnames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((String)value);
        }
        break;

      case PROJECTNAMES:
        if (value == null) {
          unsetProjectnames();
        } else {
          setProjectnames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      case PROJECTNAMES:
        return getProjectnames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      case PROJECTNAMES:
        return isSetProjectnames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProPermission_args)
        return this.equals((queProPermission_args)that);
      return false;
    }

    public boolean equals(queProPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true && this.isSetRoleid();
      boolean that_present_roleid = true && that.isSetRoleid();
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (!this.roleid.equals(that.roleid))
          return false;
      }

      boolean this_present_projectnames = true && this.isSetProjectnames();
      boolean that_present_projectnames = true && that.isSetProjectnames();
      if (this_present_projectnames || that_present_projectnames) {
        if (!(this_present_projectnames && that_present_projectnames))
          return false;
        if (!this.projectnames.equals(that.projectnames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true && (isSetRoleid());
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      boolean present_projectnames = true && (isSetProjectnames());
      list.add(present_projectnames);
      if (present_projectnames)
        list.add(projectnames);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectnames()).compareTo(other.isSetProjectnames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectnames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectnames, other.projectnames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProPermission_args(");
      boolean first = true;

      sb.append("roleid:");
      if (this.roleid == null) {
        sb.append("null");
      } else {
        sb.append(this.roleid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectnames:");
      if (this.projectnames == null) {
        sb.append("null");
      } else {
        sb.append(this.projectnames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProPermission_argsStandardSchemeFactory implements SchemeFactory {
      public queProPermission_argsStandardScheme getScheme() {
        return new queProPermission_argsStandardScheme();
      }
    }

    private static class queProPermission_argsStandardScheme extends StandardScheme<queProPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleid = iprot.readString();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECTNAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.projectnames = new ArrayList<String>(_list106.size);
                  String _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = iprot.readString();
                    struct.projectnames.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectnamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleid != null) {
          oprot.writeFieldBegin(ROLEID_FIELD_DESC);
          oprot.writeString(struct.roleid);
          oprot.writeFieldEnd();
        }
        if (struct.projectnames != null) {
          oprot.writeFieldBegin(PROJECTNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.projectnames.size()));
            for (String _iter109 : struct.projectnames)
            {
              oprot.writeString(_iter109);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProPermission_argsTupleSchemeFactory implements SchemeFactory {
      public queProPermission_argsTupleScheme getScheme() {
        return new queProPermission_argsTupleScheme();
      }
    }

    private static class queProPermission_argsTupleScheme extends TupleScheme<queProPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetProjectnames()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoleid()) {
          oprot.writeString(struct.roleid);
        }
        if (struct.isSetProjectnames()) {
          {
            oprot.writeI32(struct.projectnames.size());
            for (String _iter110 : struct.projectnames)
            {
              oprot.writeString(_iter110);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roleid = iprot.readString();
          struct.setRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.projectnames = new ArrayList<String>(_list111.size);
            String _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = iprot.readString();
              struct.projectnames.add(_elem112);
            }
          }
          struct.setProjectnamesIsSet(true);
        }
      }
    }

  }

  public static class queProPermission_result implements org.apache.thrift.TBase<queProPermission_result, queProPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<queProPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queProPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queProPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queProPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queProPermission_result.class, metaDataMap);
    }

    public queProPermission_result() {
    }

    public queProPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queProPermission_result(queProPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queProPermission_result deepCopy() {
      return new queProPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queProPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queProPermission_result)
        return this.equals((queProPermission_result)that);
      return false;
    }

    public boolean equals(queProPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queProPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queProPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queProPermission_resultStandardSchemeFactory implements SchemeFactory {
      public queProPermission_resultStandardScheme getScheme() {
        return new queProPermission_resultStandardScheme();
      }
    }

    private static class queProPermission_resultStandardScheme extends StandardScheme<queProPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queProPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map114.size);
                  String _key115;
                  String _val116;
                  for (int _i117 = 0; _i117 < _map114.size; ++_i117)
                  {
                    _key115 = iprot.readString();
                    _val116 = iprot.readString();
                    struct.success.put(_key115, _val116);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queProPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter118 : struct.success.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queProPermission_resultTupleSchemeFactory implements SchemeFactory {
      public queProPermission_resultTupleScheme getScheme() {
        return new queProPermission_resultTupleScheme();
      }
    }

    private static class queProPermission_resultTupleScheme extends TupleScheme<queProPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queProPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter119 : struct.success.entrySet())
            {
              oprot.writeString(_iter119.getKey());
              oprot.writeString(_iter119.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queProPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map120.size);
            String _key121;
            String _val122;
            for (int _i123 = 0; _i123 < _map120.size; ++_i123)
            {
              _key121 = iprot.readString();
              _val122 = iprot.readString();
              struct.success.put(_key121, _val122);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setRolePermission_args implements org.apache.thrift.TBase<setRolePermission_args, setRolePermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRolePermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRolePermission_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PERMISSIONIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionids", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECTNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("projectnames", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRolePermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRolePermission_argsTupleSchemeFactory());
    }

    public String roleid; // required
    public List<String> permissionids; // required
    public List<String> projectnames; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid"),
      PERMISSIONIDS((short)2, "permissionids"),
      PROJECTNAMES((short)3, "projectnames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          case 2: // PERMISSIONIDS
            return PERMISSIONIDS;
          case 3: // PROJECTNAMES
            return PROJECTNAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERMISSIONIDS, new org.apache.thrift.meta_data.FieldMetaData("permissionids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PROJECTNAMES, new org.apache.thrift.meta_data.FieldMetaData("projectnames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRolePermission_args.class, metaDataMap);
    }

    public setRolePermission_args() {
    }

    public setRolePermission_args(
      String roleid,
      List<String> permissionids,
      List<String> projectnames)
    {
      this();
      this.roleid = roleid;
      this.permissionids = permissionids;
      this.projectnames = projectnames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRolePermission_args(setRolePermission_args other) {
      if (other.isSetRoleid()) {
        this.roleid = other.roleid;
      }
      if (other.isSetPermissionids()) {
        List<String> __this__permissionids = new ArrayList<String>(other.permissionids);
        this.permissionids = __this__permissionids;
      }
      if (other.isSetProjectnames()) {
        List<String> __this__projectnames = new ArrayList<String>(other.projectnames);
        this.projectnames = __this__projectnames;
      }
    }

    public setRolePermission_args deepCopy() {
      return new setRolePermission_args(this);
    }

    @Override
    public void clear() {
      this.roleid = null;
      this.permissionids = null;
      this.projectnames = null;
    }

    public String getRoleid() {
      return this.roleid;
    }

    public setRolePermission_args setRoleid(String roleid) {
      this.roleid = roleid;
      return this;
    }

    public void unsetRoleid() {
      this.roleid = null;
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return this.roleid != null;
    }

    public void setRoleidIsSet(boolean value) {
      if (!value) {
        this.roleid = null;
      }
    }

    public int getPermissionidsSize() {
      return (this.permissionids == null) ? 0 : this.permissionids.size();
    }

    public java.util.Iterator<String> getPermissionidsIterator() {
      return (this.permissionids == null) ? null : this.permissionids.iterator();
    }

    public void addToPermissionids(String elem) {
      if (this.permissionids == null) {
        this.permissionids = new ArrayList<String>();
      }
      this.permissionids.add(elem);
    }

    public List<String> getPermissionids() {
      return this.permissionids;
    }

    public setRolePermission_args setPermissionids(List<String> permissionids) {
      this.permissionids = permissionids;
      return this;
    }

    public void unsetPermissionids() {
      this.permissionids = null;
    }

    /** Returns true if field permissionids is set (has been assigned a value) and false otherwise */
    public boolean isSetPermissionids() {
      return this.permissionids != null;
    }

    public void setPermissionidsIsSet(boolean value) {
      if (!value) {
        this.permissionids = null;
      }
    }

    public int getProjectnamesSize() {
      return (this.projectnames == null) ? 0 : this.projectnames.size();
    }

    public java.util.Iterator<String> getProjectnamesIterator() {
      return (this.projectnames == null) ? null : this.projectnames.iterator();
    }

    public void addToProjectnames(String elem) {
      if (this.projectnames == null) {
        this.projectnames = new ArrayList<String>();
      }
      this.projectnames.add(elem);
    }

    public List<String> getProjectnames() {
      return this.projectnames;
    }

    public setRolePermission_args setProjectnames(List<String> projectnames) {
      this.projectnames = projectnames;
      return this;
    }

    public void unsetProjectnames() {
      this.projectnames = null;
    }

    /** Returns true if field projectnames is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectnames() {
      return this.projectnames != null;
    }

    public void setProjectnamesIsSet(boolean value) {
      if (!value) {
        this.projectnames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((String)value);
        }
        break;

      case PERMISSIONIDS:
        if (value == null) {
          unsetPermissionids();
        } else {
          setPermissionids((List<String>)value);
        }
        break;

      case PROJECTNAMES:
        if (value == null) {
          unsetProjectnames();
        } else {
          setProjectnames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      case PERMISSIONIDS:
        return getPermissionids();

      case PROJECTNAMES:
        return getProjectnames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      case PERMISSIONIDS:
        return isSetPermissionids();
      case PROJECTNAMES:
        return isSetProjectnames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRolePermission_args)
        return this.equals((setRolePermission_args)that);
      return false;
    }

    public boolean equals(setRolePermission_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true && this.isSetRoleid();
      boolean that_present_roleid = true && that.isSetRoleid();
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (!this.roleid.equals(that.roleid))
          return false;
      }

      boolean this_present_permissionids = true && this.isSetPermissionids();
      boolean that_present_permissionids = true && that.isSetPermissionids();
      if (this_present_permissionids || that_present_permissionids) {
        if (!(this_present_permissionids && that_present_permissionids))
          return false;
        if (!this.permissionids.equals(that.permissionids))
          return false;
      }

      boolean this_present_projectnames = true && this.isSetProjectnames();
      boolean that_present_projectnames = true && that.isSetProjectnames();
      if (this_present_projectnames || that_present_projectnames) {
        if (!(this_present_projectnames && that_present_projectnames))
          return false;
        if (!this.projectnames.equals(that.projectnames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true && (isSetRoleid());
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      boolean present_permissionids = true && (isSetPermissionids());
      list.add(present_permissionids);
      if (present_permissionids)
        list.add(permissionids);

      boolean present_projectnames = true && (isSetProjectnames());
      list.add(present_projectnames);
      if (present_projectnames)
        list.add(projectnames);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRolePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermissionids()).compareTo(other.isSetPermissionids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermissionids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionids, other.permissionids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectnames()).compareTo(other.isSetProjectnames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectnames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectnames, other.projectnames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRolePermission_args(");
      boolean first = true;

      sb.append("roleid:");
      if (this.roleid == null) {
        sb.append("null");
      } else {
        sb.append(this.roleid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("permissionids:");
      if (this.permissionids == null) {
        sb.append("null");
      } else {
        sb.append(this.permissionids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectnames:");
      if (this.projectnames == null) {
        sb.append("null");
      } else {
        sb.append(this.projectnames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRolePermission_argsStandardSchemeFactory implements SchemeFactory {
      public setRolePermission_argsStandardScheme getScheme() {
        return new setRolePermission_argsStandardScheme();
      }
    }

    private static class setRolePermission_argsStandardScheme extends StandardScheme<setRolePermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRolePermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleid = iprot.readString();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERMISSIONIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.permissionids = new ArrayList<String>(_list124.size);
                  String _elem125;
                  for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                  {
                    _elem125 = iprot.readString();
                    struct.permissionids.add(_elem125);
                  }
                  iprot.readListEnd();
                }
                struct.setPermissionidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECTNAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list127 = iprot.readListBegin();
                  struct.projectnames = new ArrayList<String>(_list127.size);
                  String _elem128;
                  for (int _i129 = 0; _i129 < _list127.size; ++_i129)
                  {
                    _elem128 = iprot.readString();
                    struct.projectnames.add(_elem128);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectnamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRolePermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleid != null) {
          oprot.writeFieldBegin(ROLEID_FIELD_DESC);
          oprot.writeString(struct.roleid);
          oprot.writeFieldEnd();
        }
        if (struct.permissionids != null) {
          oprot.writeFieldBegin(PERMISSIONIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.permissionids.size()));
            for (String _iter130 : struct.permissionids)
            {
              oprot.writeString(_iter130);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.projectnames != null) {
          oprot.writeFieldBegin(PROJECTNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.projectnames.size()));
            for (String _iter131 : struct.projectnames)
            {
              oprot.writeString(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRolePermission_argsTupleSchemeFactory implements SchemeFactory {
      public setRolePermission_argsTupleScheme getScheme() {
        return new setRolePermission_argsTupleScheme();
      }
    }

    private static class setRolePermission_argsTupleScheme extends TupleScheme<setRolePermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRolePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetPermissionids()) {
          optionals.set(1);
        }
        if (struct.isSetProjectnames()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoleid()) {
          oprot.writeString(struct.roleid);
        }
        if (struct.isSetPermissionids()) {
          {
            oprot.writeI32(struct.permissionids.size());
            for (String _iter132 : struct.permissionids)
            {
              oprot.writeString(_iter132);
            }
          }
        }
        if (struct.isSetProjectnames()) {
          {
            oprot.writeI32(struct.projectnames.size());
            for (String _iter133 : struct.projectnames)
            {
              oprot.writeString(_iter133);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRolePermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roleid = iprot.readString();
          struct.setRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.permissionids = new ArrayList<String>(_list134.size);
            String _elem135;
            for (int _i136 = 0; _i136 < _list134.size; ++_i136)
            {
              _elem135 = iprot.readString();
              struct.permissionids.add(_elem135);
            }
          }
          struct.setPermissionidsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.projectnames = new ArrayList<String>(_list137.size);
            String _elem138;
            for (int _i139 = 0; _i139 < _list137.size; ++_i139)
            {
              _elem138 = iprot.readString();
              struct.projectnames.add(_elem138);
            }
          }
          struct.setProjectnamesIsSet(true);
        }
      }
    }

  }

  public static class setRolePermission_result implements org.apache.thrift.TBase<setRolePermission_result, setRolePermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRolePermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRolePermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRolePermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRolePermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRolePermission_result.class, metaDataMap);
    }

    public setRolePermission_result() {
    }

    public setRolePermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRolePermission_result(setRolePermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public setRolePermission_result deepCopy() {
      return new setRolePermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public setRolePermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRolePermission_result)
        return this.equals((setRolePermission_result)that);
      return false;
    }

    public boolean equals(setRolePermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setRolePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRolePermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRolePermission_resultStandardSchemeFactory implements SchemeFactory {
      public setRolePermission_resultStandardScheme getScheme() {
        return new setRolePermission_resultStandardScheme();
      }
    }

    private static class setRolePermission_resultStandardScheme extends StandardScheme<setRolePermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRolePermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map140.size);
                  String _key141;
                  String _val142;
                  for (int _i143 = 0; _i143 < _map140.size; ++_i143)
                  {
                    _key141 = iprot.readString();
                    _val142 = iprot.readString();
                    struct.success.put(_key141, _val142);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRolePermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter144 : struct.success.entrySet())
            {
              oprot.writeString(_iter144.getKey());
              oprot.writeString(_iter144.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRolePermission_resultTupleSchemeFactory implements SchemeFactory {
      public setRolePermission_resultTupleScheme getScheme() {
        return new setRolePermission_resultTupleScheme();
      }
    }

    private static class setRolePermission_resultTupleScheme extends TupleScheme<setRolePermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRolePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter145 : struct.success.entrySet())
            {
              oprot.writeString(_iter145.getKey());
              oprot.writeString(_iter145.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRolePermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map146 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map146.size);
            String _key147;
            String _val148;
            for (int _i149 = 0; _i149 < _map146.size; ++_i149)
            {
              _key147 = iprot.readString();
              _val148 = iprot.readString();
              struct.success.put(_key147, _val148);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delUser_args implements org.apache.thrift.TBase<delUser_args, delUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<delUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delUser_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delUser_argsTupleSchemeFactory());
    }

    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delUser_args.class, metaDataMap);
    }

    public delUser_args() {
    }

    public delUser_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delUser_args(delUser_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public delUser_args deepCopy() {
      return new delUser_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public delUser_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delUser_args)
        return this.equals((delUser_args)that);
      return false;
    }

    public boolean equals(delUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(delUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delUser_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delUser_argsStandardSchemeFactory implements SchemeFactory {
      public delUser_argsStandardScheme getScheme() {
        return new delUser_argsStandardScheme();
      }
    }

    private static class delUser_argsStandardScheme extends StandardScheme<delUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delUser_argsTupleSchemeFactory implements SchemeFactory {
      public delUser_argsTupleScheme getScheme() {
        return new delUser_argsTupleScheme();
      }
    }

    private static class delUser_argsTupleScheme extends TupleScheme<delUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class delUser_result implements org.apache.thrift.TBase<delUser_result, delUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<delUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delUser_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delUser_result.class, metaDataMap);
    }

    public delUser_result() {
    }

    public delUser_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delUser_result(delUser_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public delUser_result deepCopy() {
      return new delUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public delUser_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delUser_result)
        return this.equals((delUser_result)that);
      return false;
    }

    public boolean equals(delUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delUser_resultStandardSchemeFactory implements SchemeFactory {
      public delUser_resultStandardScheme getScheme() {
        return new delUser_resultStandardScheme();
      }
    }

    private static class delUser_resultStandardScheme extends StandardScheme<delUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map150 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map150.size);
                  String _key151;
                  String _val152;
                  for (int _i153 = 0; _i153 < _map150.size; ++_i153)
                  {
                    _key151 = iprot.readString();
                    _val152 = iprot.readString();
                    struct.success.put(_key151, _val152);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter154 : struct.success.entrySet())
            {
              oprot.writeString(_iter154.getKey());
              oprot.writeString(_iter154.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delUser_resultTupleSchemeFactory implements SchemeFactory {
      public delUser_resultTupleScheme getScheme() {
        return new delUser_resultTupleScheme();
      }
    }

    private static class delUser_resultTupleScheme extends TupleScheme<delUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter155 : struct.success.entrySet())
            {
              oprot.writeString(_iter155.getKey());
              oprot.writeString(_iter155.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map156 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map156.size);
            String _key157;
            String _val158;
            for (int _i159 = 0; _i159 < _map156.size; ++_i159)
            {
              _key157 = iprot.readString();
              _val158 = iprot.readString();
              struct.success.put(_key157, _val158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class openUser_args implements org.apache.thrift.TBase<openUser_args, openUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<openUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openUser_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openUser_argsTupleSchemeFactory());
    }

    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openUser_args.class, metaDataMap);
    }

    public openUser_args() {
    }

    public openUser_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openUser_args(openUser_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public openUser_args deepCopy() {
      return new openUser_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public openUser_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openUser_args)
        return this.equals((openUser_args)that);
      return false;
    }

    public boolean equals(openUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(openUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openUser_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openUser_argsStandardSchemeFactory implements SchemeFactory {
      public openUser_argsStandardScheme getScheme() {
        return new openUser_argsStandardScheme();
      }
    }

    private static class openUser_argsStandardScheme extends StandardScheme<openUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openUser_argsTupleSchemeFactory implements SchemeFactory {
      public openUser_argsTupleScheme getScheme() {
        return new openUser_argsTupleScheme();
      }
    }

    private static class openUser_argsTupleScheme extends TupleScheme<openUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class openUser_result implements org.apache.thrift.TBase<openUser_result, openUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<openUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openUser_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openUser_result.class, metaDataMap);
    }

    public openUser_result() {
    }

    public openUser_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openUser_result(openUser_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public openUser_result deepCopy() {
      return new openUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public openUser_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openUser_result)
        return this.equals((openUser_result)that);
      return false;
    }

    public boolean equals(openUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(openUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openUser_resultStandardSchemeFactory implements SchemeFactory {
      public openUser_resultStandardScheme getScheme() {
        return new openUser_resultStandardScheme();
      }
    }

    private static class openUser_resultStandardScheme extends StandardScheme<openUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map160.size);
                  String _key161;
                  String _val162;
                  for (int _i163 = 0; _i163 < _map160.size; ++_i163)
                  {
                    _key161 = iprot.readString();
                    _val162 = iprot.readString();
                    struct.success.put(_key161, _val162);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter164 : struct.success.entrySet())
            {
              oprot.writeString(_iter164.getKey());
              oprot.writeString(_iter164.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openUser_resultTupleSchemeFactory implements SchemeFactory {
      public openUser_resultTupleScheme getScheme() {
        return new openUser_resultTupleScheme();
      }
    }

    private static class openUser_resultTupleScheme extends TupleScheme<openUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter165 : struct.success.entrySet())
            {
              oprot.writeString(_iter165.getKey());
              oprot.writeString(_iter165.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map166.size);
            String _key167;
            String _val168;
            for (int _i169 = 0; _i169 < _map166.size; ++_i169)
            {
              _key167 = iprot.readString();
              _val168 = iprot.readString();
              struct.success.put(_key167, _val168);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeUser_args implements org.apache.thrift.TBase<closeUser_args, closeUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeUser_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeUser_argsTupleSchemeFactory());
    }

    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeUser_args.class, metaDataMap);
    }

    public closeUser_args() {
    }

    public closeUser_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeUser_args(closeUser_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public closeUser_args deepCopy() {
      return new closeUser_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public closeUser_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeUser_args)
        return this.equals((closeUser_args)that);
      return false;
    }

    public boolean equals(closeUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeUser_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeUser_argsStandardSchemeFactory implements SchemeFactory {
      public closeUser_argsStandardScheme getScheme() {
        return new closeUser_argsStandardScheme();
      }
    }

    private static class closeUser_argsStandardScheme extends StandardScheme<closeUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeUser_argsTupleSchemeFactory implements SchemeFactory {
      public closeUser_argsTupleScheme getScheme() {
        return new closeUser_argsTupleScheme();
      }
    }

    private static class closeUser_argsTupleScheme extends TupleScheme<closeUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class closeUser_result implements org.apache.thrift.TBase<closeUser_result, closeUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeUser_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeUser_result.class, metaDataMap);
    }

    public closeUser_result() {
    }

    public closeUser_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeUser_result(closeUser_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public closeUser_result deepCopy() {
      return new closeUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public closeUser_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeUser_result)
        return this.equals((closeUser_result)that);
      return false;
    }

    public boolean equals(closeUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeUser_resultStandardSchemeFactory implements SchemeFactory {
      public closeUser_resultStandardScheme getScheme() {
        return new closeUser_resultStandardScheme();
      }
    }

    private static class closeUser_resultStandardScheme extends StandardScheme<closeUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map170.size);
                  String _key171;
                  String _val172;
                  for (int _i173 = 0; _i173 < _map170.size; ++_i173)
                  {
                    _key171 = iprot.readString();
                    _val172 = iprot.readString();
                    struct.success.put(_key171, _val172);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter174 : struct.success.entrySet())
            {
              oprot.writeString(_iter174.getKey());
              oprot.writeString(_iter174.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeUser_resultTupleSchemeFactory implements SchemeFactory {
      public closeUser_resultTupleScheme getScheme() {
        return new closeUser_resultTupleScheme();
      }
    }

    private static class closeUser_resultTupleScheme extends TupleScheme<closeUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter175 : struct.success.entrySet())
            {
              oprot.writeString(_iter175.getKey());
              oprot.writeString(_iter175.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map176 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map176.size);
            String _key177;
            String _val178;
            for (int _i179 = 0; _i179 < _map176.size; ++_i179)
            {
              _key177 = iprot.readString();
              _val178 = iprot.readString();
              struct.success.put(_key177, _val178);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queRole_args implements org.apache.thrift.TBase<queRole_args, queRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<queRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queRole_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queRole_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queRole_args.class, metaDataMap);
    }

    public queRole_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queRole_args(queRole_args other) {
    }

    public queRole_args deepCopy() {
      return new queRole_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queRole_args)
        return this.equals((queRole_args)that);
      return false;
    }

    public boolean equals(queRole_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queRole_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queRole_argsStandardSchemeFactory implements SchemeFactory {
      public queRole_argsStandardScheme getScheme() {
        return new queRole_argsStandardScheme();
      }
    }

    private static class queRole_argsStandardScheme extends StandardScheme<queRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queRole_argsTupleSchemeFactory implements SchemeFactory {
      public queRole_argsTupleScheme getScheme() {
        return new queRole_argsTupleScheme();
      }
    }

    private static class queRole_argsTupleScheme extends TupleScheme<queRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queRole_result implements org.apache.thrift.TBase<queRole_result, queRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<queRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queRole_result.class, metaDataMap);
    }

    public queRole_result() {
    }

    public queRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queRole_result(queRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queRole_result deepCopy() {
      return new queRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queRole_result)
        return this.equals((queRole_result)that);
      return false;
    }

    public boolean equals(queRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queRole_resultStandardSchemeFactory implements SchemeFactory {
      public queRole_resultStandardScheme getScheme() {
        return new queRole_resultStandardScheme();
      }
    }

    private static class queRole_resultStandardScheme extends StandardScheme<queRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map180.size);
                  String _key181;
                  String _val182;
                  for (int _i183 = 0; _i183 < _map180.size; ++_i183)
                  {
                    _key181 = iprot.readString();
                    _val182 = iprot.readString();
                    struct.success.put(_key181, _val182);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter184 : struct.success.entrySet())
            {
              oprot.writeString(_iter184.getKey());
              oprot.writeString(_iter184.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queRole_resultTupleSchemeFactory implements SchemeFactory {
      public queRole_resultTupleScheme getScheme() {
        return new queRole_resultTupleScheme();
      }
    }

    private static class queRole_resultTupleScheme extends TupleScheme<queRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter185 : struct.success.entrySet())
            {
              oprot.writeString(_iter185.getKey());
              oprot.writeString(_iter185.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map186 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map186.size);
            String _key187;
            String _val188;
            for (int _i189 = 0; _i189 < _map186.size; ++_i189)
            {
              _key187 = iprot.readString();
              _val188 = iprot.readString();
              struct.success.put(_key187, _val188);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queRoleByUser_args implements org.apache.thrift.TBase<queRoleByUser_args, queRoleByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<queRoleByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queRoleByUser_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queRoleByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queRoleByUser_argsTupleSchemeFactory());
    }

    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queRoleByUser_args.class, metaDataMap);
    }

    public queRoleByUser_args() {
    }

    public queRoleByUser_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queRoleByUser_args(queRoleByUser_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public queRoleByUser_args deepCopy() {
      return new queRoleByUser_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public queRoleByUser_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queRoleByUser_args)
        return this.equals((queRoleByUser_args)that);
      return false;
    }

    public boolean equals(queRoleByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(queRoleByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queRoleByUser_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queRoleByUser_argsStandardSchemeFactory implements SchemeFactory {
      public queRoleByUser_argsStandardScheme getScheme() {
        return new queRoleByUser_argsStandardScheme();
      }
    }

    private static class queRoleByUser_argsStandardScheme extends StandardScheme<queRoleByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queRoleByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queRoleByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queRoleByUser_argsTupleSchemeFactory implements SchemeFactory {
      public queRoleByUser_argsTupleScheme getScheme() {
        return new queRoleByUser_argsTupleScheme();
      }
    }

    private static class queRoleByUser_argsTupleScheme extends TupleScheme<queRoleByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queRoleByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queRoleByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class queRoleByUser_result implements org.apache.thrift.TBase<queRoleByUser_result, queRoleByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<queRoleByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queRoleByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queRoleByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queRoleByUser_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queRoleByUser_result.class, metaDataMap);
    }

    public queRoleByUser_result() {
    }

    public queRoleByUser_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queRoleByUser_result(queRoleByUser_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queRoleByUser_result deepCopy() {
      return new queRoleByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queRoleByUser_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queRoleByUser_result)
        return this.equals((queRoleByUser_result)that);
      return false;
    }

    public boolean equals(queRoleByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queRoleByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queRoleByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queRoleByUser_resultStandardSchemeFactory implements SchemeFactory {
      public queRoleByUser_resultStandardScheme getScheme() {
        return new queRoleByUser_resultStandardScheme();
      }
    }

    private static class queRoleByUser_resultStandardScheme extends StandardScheme<queRoleByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queRoleByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map190 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map190.size);
                  String _key191;
                  String _val192;
                  for (int _i193 = 0; _i193 < _map190.size; ++_i193)
                  {
                    _key191 = iprot.readString();
                    _val192 = iprot.readString();
                    struct.success.put(_key191, _val192);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queRoleByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter194 : struct.success.entrySet())
            {
              oprot.writeString(_iter194.getKey());
              oprot.writeString(_iter194.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queRoleByUser_resultTupleSchemeFactory implements SchemeFactory {
      public queRoleByUser_resultTupleScheme getScheme() {
        return new queRoleByUser_resultTupleScheme();
      }
    }

    private static class queRoleByUser_resultTupleScheme extends TupleScheme<queRoleByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queRoleByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter195 : struct.success.entrySet())
            {
              oprot.writeString(_iter195.getKey());
              oprot.writeString(_iter195.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queRoleByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map196.size);
            String _key197;
            String _val198;
            for (int _i199 = 0; _i199 < _map196.size; ++_i199)
            {
              _key197 = iprot.readString();
              _val198 = iprot.readString();
              struct.success.put(_key197, _val198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setUserRole_args implements org.apache.thrift.TBase<setUserRole_args, setUserRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserRole_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROLEIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("roleids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserRole_argsTupleSchemeFactory());
    }

    public String userid; // required
    public List<String> roleids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      ROLEIDS((short)2, "roleids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // ROLEIDS
            return ROLEIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLEIDS, new org.apache.thrift.meta_data.FieldMetaData("roleids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRole_args.class, metaDataMap);
    }

    public setUserRole_args() {
    }

    public setUserRole_args(
      String userid,
      List<String> roleids)
    {
      this();
      this.userid = userid;
      this.roleids = roleids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserRole_args(setUserRole_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetRoleids()) {
        List<String> __this__roleids = new ArrayList<String>(other.roleids);
        this.roleids = __this__roleids;
      }
    }

    public setUserRole_args deepCopy() {
      return new setUserRole_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.roleids = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public setUserRole_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public int getRoleidsSize() {
      return (this.roleids == null) ? 0 : this.roleids.size();
    }

    public java.util.Iterator<String> getRoleidsIterator() {
      return (this.roleids == null) ? null : this.roleids.iterator();
    }

    public void addToRoleids(String elem) {
      if (this.roleids == null) {
        this.roleids = new ArrayList<String>();
      }
      this.roleids.add(elem);
    }

    public List<String> getRoleids() {
      return this.roleids;
    }

    public setUserRole_args setRoleids(List<String> roleids) {
      this.roleids = roleids;
      return this;
    }

    public void unsetRoleids() {
      this.roleids = null;
    }

    /** Returns true if field roleids is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleids() {
      return this.roleids != null;
    }

    public void setRoleidsIsSet(boolean value) {
      if (!value) {
        this.roleids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case ROLEIDS:
        if (value == null) {
          unsetRoleids();
        } else {
          setRoleids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case ROLEIDS:
        return getRoleids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case ROLEIDS:
        return isSetRoleids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserRole_args)
        return this.equals((setUserRole_args)that);
      return false;
    }

    public boolean equals(setUserRole_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_roleids = true && this.isSetRoleids();
      boolean that_present_roleids = true && that.isSetRoleids();
      if (this_present_roleids || that_present_roleids) {
        if (!(this_present_roleids && that_present_roleids))
          return false;
        if (!this.roleids.equals(that.roleids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_roleids = true && (isSetRoleids());
      list.add(present_roleids);
      if (present_roleids)
        list.add(roleids);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUserRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleids()).compareTo(other.isSetRoleids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleids, other.roleids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserRole_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleids:");
      if (this.roleids == null) {
        sb.append("null");
      } else {
        sb.append(this.roleids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserRole_argsStandardSchemeFactory implements SchemeFactory {
      public setUserRole_argsStandardScheme getScheme() {
        return new setUserRole_argsStandardScheme();
      }
    }

    private static class setUserRole_argsStandardScheme extends StandardScheme<setUserRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLEIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.roleids = new ArrayList<String>(_list200.size);
                  String _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = iprot.readString();
                    struct.roleids.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setRoleidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.roleids != null) {
          oprot.writeFieldBegin(ROLEIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.roleids.size()));
            for (String _iter203 : struct.roleids)
            {
              oprot.writeString(_iter203);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserRole_argsTupleSchemeFactory implements SchemeFactory {
      public setUserRole_argsTupleScheme getScheme() {
        return new setUserRole_argsTupleScheme();
      }
    }

    private static class setUserRole_argsTupleScheme extends TupleScheme<setUserRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetRoleids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetRoleids()) {
          {
            oprot.writeI32(struct.roleids.size());
            for (String _iter204 : struct.roleids)
            {
              oprot.writeString(_iter204);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.roleids = new ArrayList<String>(_list205.size);
            String _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = iprot.readString();
              struct.roleids.add(_elem206);
            }
          }
          struct.setRoleidsIsSet(true);
        }
      }
    }

  }

  public static class setUserRole_result implements org.apache.thrift.TBase<setUserRole_result, setUserRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserRole_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRole_result.class, metaDataMap);
    }

    public setUserRole_result() {
    }

    public setUserRole_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserRole_result(setUserRole_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public setUserRole_result deepCopy() {
      return new setUserRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public setUserRole_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserRole_result)
        return this.equals((setUserRole_result)that);
      return false;
    }

    public boolean equals(setUserRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUserRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserRole_resultStandardSchemeFactory implements SchemeFactory {
      public setUserRole_resultStandardScheme getScheme() {
        return new setUserRole_resultStandardScheme();
      }
    }

    private static class setUserRole_resultStandardScheme extends StandardScheme<setUserRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map208 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map208.size);
                  String _key209;
                  String _val210;
                  for (int _i211 = 0; _i211 < _map208.size; ++_i211)
                  {
                    _key209 = iprot.readString();
                    _val210 = iprot.readString();
                    struct.success.put(_key209, _val210);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter212 : struct.success.entrySet())
            {
              oprot.writeString(_iter212.getKey());
              oprot.writeString(_iter212.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserRole_resultTupleSchemeFactory implements SchemeFactory {
      public setUserRole_resultTupleScheme getScheme() {
        return new setUserRole_resultTupleScheme();
      }
    }

    private static class setUserRole_resultTupleScheme extends TupleScheme<setUserRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter213 : struct.success.entrySet())
            {
              oprot.writeString(_iter213.getKey());
              oprot.writeString(_iter213.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map214 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map214.size);
            String _key215;
            String _val216;
            for (int _i217 = 0; _i217 < _map214.size; ++_i217)
            {
              _key215 = iprot.readString();
              _val216 = iprot.readString();
              struct.success.put(_key215, _val216);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class authorityFilter_args implements org.apache.thrift.TBase<authorityFilter_args, authorityFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<authorityFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authorityFilter_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authorityFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authorityFilter_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String url; // required
    public String project; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      URL((short)2, "url"),
      PROJECT((short)3, "project");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // URL
            return URL;
          case 3: // PROJECT
            return PROJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authorityFilter_args.class, metaDataMap);
    }

    public authorityFilter_args() {
    }

    public authorityFilter_args(
      String userid,
      String url,
      String project)
    {
      this();
      this.userid = userid;
      this.url = url;
      this.project = project;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authorityFilter_args(authorityFilter_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetProject()) {
        this.project = other.project;
      }
    }

    public authorityFilter_args deepCopy() {
      return new authorityFilter_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.url = null;
      this.project = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public authorityFilter_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getUrl() {
      return this.url;
    }

    public authorityFilter_args setUrl(String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public String getProject() {
      return this.project;
    }

    public authorityFilter_args setProject(String project) {
      this.project = project;
      return this;
    }

    public void unsetProject() {
      this.project = null;
    }

    /** Returns true if field project is set (has been assigned a value) and false otherwise */
    public boolean isSetProject() {
      return this.project != null;
    }

    public void setProjectIsSet(boolean value) {
      if (!value) {
        this.project = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((String)value);
        }
        break;

      case PROJECT:
        if (value == null) {
          unsetProject();
        } else {
          setProject((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case URL:
        return getUrl();

      case PROJECT:
        return getProject();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case URL:
        return isSetUrl();
      case PROJECT:
        return isSetProject();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authorityFilter_args)
        return this.equals((authorityFilter_args)that);
      return false;
    }

    public boolean equals(authorityFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_project = true && this.isSetProject();
      boolean that_present_project = true && that.isSetProject();
      if (this_present_project || that_present_project) {
        if (!(this_present_project && that_present_project))
          return false;
        if (!this.project.equals(that.project))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_url = true && (isSetUrl());
      list.add(present_url);
      if (present_url)
        list.add(url);

      boolean present_project = true && (isSetProject());
      list.add(present_project);
      if (present_project)
        list.add(project);

      return list.hashCode();
    }

    @Override
    public int compareTo(authorityFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authorityFilter_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("project:");
      if (this.project == null) {
        sb.append("null");
      } else {
        sb.append(this.project);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authorityFilter_argsStandardSchemeFactory implements SchemeFactory {
      public authorityFilter_argsStandardScheme getScheme() {
        return new authorityFilter_argsStandardScheme();
      }
    }

    private static class authorityFilter_argsStandardScheme extends StandardScheme<authorityFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authorityFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.project = iprot.readString();
                struct.setProjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authorityFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.project != null) {
          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
          oprot.writeString(struct.project);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authorityFilter_argsTupleSchemeFactory implements SchemeFactory {
      public authorityFilter_argsTupleScheme getScheme() {
        return new authorityFilter_argsTupleScheme();
      }
    }

    private static class authorityFilter_argsTupleScheme extends TupleScheme<authorityFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authorityFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetProject()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetProject()) {
          oprot.writeString(struct.project);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authorityFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.project = iprot.readString();
          struct.setProjectIsSet(true);
        }
      }
    }

  }

  public static class authorityFilter_result implements org.apache.thrift.TBase<authorityFilter_result, authorityFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<authorityFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authorityFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authorityFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authorityFilter_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authorityFilter_result.class, metaDataMap);
    }

    public authorityFilter_result() {
    }

    public authorityFilter_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authorityFilter_result(authorityFilter_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public authorityFilter_result deepCopy() {
      return new authorityFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public authorityFilter_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authorityFilter_result)
        return this.equals((authorityFilter_result)that);
      return false;
    }

    public boolean equals(authorityFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(authorityFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authorityFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authorityFilter_resultStandardSchemeFactory implements SchemeFactory {
      public authorityFilter_resultStandardScheme getScheme() {
        return new authorityFilter_resultStandardScheme();
      }
    }

    private static class authorityFilter_resultStandardScheme extends StandardScheme<authorityFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authorityFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map218 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map218.size);
                  String _key219;
                  String _val220;
                  for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                  {
                    _key219 = iprot.readString();
                    _val220 = iprot.readString();
                    struct.success.put(_key219, _val220);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authorityFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter222 : struct.success.entrySet())
            {
              oprot.writeString(_iter222.getKey());
              oprot.writeString(_iter222.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authorityFilter_resultTupleSchemeFactory implements SchemeFactory {
      public authorityFilter_resultTupleScheme getScheme() {
        return new authorityFilter_resultTupleScheme();
      }
    }

    private static class authorityFilter_resultTupleScheme extends TupleScheme<authorityFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authorityFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter223 : struct.success.entrySet())
            {
              oprot.writeString(_iter223.getKey());
              oprot.writeString(_iter223.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authorityFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map224 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map224.size);
            String _key225;
            String _val226;
            for (int _i227 = 0; _i227 < _map224.size; ++_i227)
            {
              _key225 = iprot.readString();
              _val226 = iprot.readString();
              struct.success.put(_key225, _val226);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
